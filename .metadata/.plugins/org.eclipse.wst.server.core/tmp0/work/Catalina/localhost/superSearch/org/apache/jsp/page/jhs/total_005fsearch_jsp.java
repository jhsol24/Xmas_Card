/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.23
 * Generated at: 2021-06-30 05:28:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.page.jhs;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.IOException;
import javax.servlet.jsp.JspWriter;
import java.util.*;
import java.io.IOException;
import javax.servlet.jsp.JspWriter;
import QueryAPI530.Search;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.io.UnsupportedEncodingException;
import java.text.*;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.xml.sax.SAXException;
import java.util.*;

public final class total_005fsearch_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


/**
*  file: WNAnchor.jsp
*  subject: íì´ì§ ì²ë¦¬ë¥¼ íê¸° ìí ì ë³´ì²ë¦¬í´ëì¤
*  ------------------------------------------------------------------------
*  @original author: WISEnut
*  @edit author:WISEnut
*  @update date 2012.02.03
*  ------------------------------------------------------------------------
*/
	public class WNAnchor {
        private int m_before = -1;
        private int m_next = -1;
        private int m_bundleBefore = -1;
        private int m_bundleNext = -1;
        private int m_firstPage = -1;
        private int m_lastPage = -1;
        private int m_totalPgCount = 0;
        private int m_totlalBundlePgCount = 0;
        private int m_pageCount = 0;
        private int m_curPageNumber = 1;
        private String[][] m_pages = new String[1][2];

        public WNAnchor() {
            m_pages[0][0] = "1";
            m_pages[0][1] = "-1";
        }

        public int getBefore() {
            return m_before;
        }

        public  void setBefore(int before) {
            m_before = before;
        }

        public int getFirstPage() {
            return m_firstPage;
        }

        public void setFirstPage(int firstPage) {
            m_firstPage = firstPage;
        }

        public int getLastPage() {
            return m_lastPage;
        }

        public void setLastPage(int lastPage) {
            m_lastPage = lastPage;
        }

        public int getNext() {
            return m_next;
        }

        public void setNext(int next) {
            m_next = next;
        }

        public int getBundleBefore() {
            return m_bundleBefore;
        }

        public void setBundleBefore(int bundleBefore) {
            m_bundleBefore = bundleBefore;
        }

        public int getBundleNext() {
            return m_bundleNext;
        }

        public void setBundleNext(int bundleNext) {
            m_bundleNext = bundleNext;
        }

        public int getTotalPgCount() {
            return m_totalPgCount;
        }

        public void setTotalPgCount(int totalPgCount) {
            m_totalPgCount = totalPgCount;
        }

        public int getTotlalBundlePgCount() {
            return m_totlalBundlePgCount;
        }

        public void setTotlalBundlePgCount(int totlalBundlePgCount) {
            m_totlalBundlePgCount = totlalBundlePgCount;
        }

        public int getPageCount() {
            return m_pageCount;
        }

        public void setPageCount(int pageCount) {
            m_pageCount = pageCount;
        }

        public int getCurPageNumber() {
            return m_curPageNumber;
        }

        public void setCurPageNumber(int curPageNumber) {
            m_curPageNumber = curPageNumber;
        }

        public String[][] getPages() {
            return m_pages;
        }

        public void setPages(String[][] pages) {
            m_pages = pages;
        }
    }


    /**
    *  subject: 검색 환경 설정 페이지
    **/

    



	static String SEARCH_IP="27.96.134.142";
	static int SEARCH_PORT=7000;
	static String MANAGER_IP="27.96.134.142";
	static int MANAGER_PORT=7800;

	public String[] COLLECTIONS = new String[]{"dctn","doc"};
	public String[] COLLECTIONS_NAME = new String[]{"dctn","doc"};
	public String[] MERGE_COLLECTIONS = new String[]{""};
	public class WNCollection{
	public String[][] MERGE_COLLECTION_INFO = null;
	public String[][] COLLECTION_INFO = null;
		WNCollection(){
			COLLECTION_INFO = new String[][]
			{
			{
			"dctn", // set index name
			"dctn", // set collection name
			"0,3",  // set pageinfo (start,count)
			"1,0,0,0,0", // set query analyzer (useKMA,isCase,useOriginal,useSynonym, duplcated detection)
			"RANK/DESC,DATE/DESC",  // set sort field (field,order) multi sort '/'
			"basic,rpfmo,100",  // set sort field (field,order) multi sort '/'
			"TMNL_DEF,HDWD_NM,SPPT,HDWD",// set search field
			"DOCID,Date,HDWD,HDWD_NM,HDWD_CHCH,SPPT,TMNL_DEF,ANTN,USG,CTGR,SRCE_DCTN,DCTN_STATE,DCTN_OPN_YN,RGST_DTTM,RGSTR_ID,MDFC_DTTM,MDFR_ID,SYST_DTTM,HANGL_ALPHB_SRWD,BLNK_RMV_SRWD,ADD_CN,REF_CN,OPNN_CN,RDCNT,TOPIC,TERMS,ALIAS",// set document field
			"", // set date range
			"", // set rank range
			"", // set prefix query, example: <fieldname:contains:value1>|<fieldname:contains:value2>/1,  (fieldname:contains:value) and ' ', or '|', not '!' / operator (AND:1, OR:0)
			"", // set collection query (<fieldname:contains:value^weight | value^weight>/option...) and ' ', or '|'
			"", // set boost query (<fieldname:contains:value> | <field3:contains:value>...) and ' ', or '|'
			"", // set filter operation (<fieldname:operator:value>)
			"", // set groupby field(field, count)
			"", // set sort field group(field/order,field/order,...)
			"", // set categoryBoost(fieldname,matchType,boostID,boostKeyword)
			"", // set categoryGroupBy (fieldname:value)
			"", // set categoryQuery (fieldname:value)
			"", // set property group (fieldname,min,max, groupcount)
			"CTGR,SRCE_DCTN,DCTN_STATE,DCTN_OPN_YN,ALIAS", // use check prefix query filed
			"", // set use check fast access field
			"", // set multigroupby field
			"", // set auth query (Auth Target Field, Auth Collection, Auth Reference Field, Authority Query)
			"", // set Duplicate Detection Criterion Field, RANK/DESC,DATE/DESC
			"dctn" // collection display name
			}
         ,
			{
			"doc", // set index name
			"doc", // set collection name
			"0,3",  // set pageinfo (start,count)
			"1,0,0,0,0", // set query analyzer (useKMA,isCase,useOriginal,useSynonym, duplcated detection)
			"RANK/DESC,DATE/DESC",  // set sort field (field,order) multi sort '/'
			"basic,rpfmo,100",  // set sort field (field,order) multi sort '/'
			"DOC_NM,DOC_ENG,HDWD_SRCHWD",// set search field
			"DOCID,Date,STATE,MENU_CLSF_CD,DOC_NM,CN_TAG,RDCNT,ANMT_YN,WRT_STATE,DOC_CHNS,DOC_ENG,DOC_SRCLG_ABR,MDFC_DTTM,MDFR_ID,RGST_DTTM,RGSTR_ID,DVS,HDWD_SRCHWD,ED_MODE,DOC_HNGNM,DCTN_KND,STATUS,ALIAS",// set document field
			"", // set date range
			"", // set rank range
			"", // set prefix query, example: <fieldname:contains:value1>|<fieldname:contains:value2>/1,  (fieldname:contains:value) and ' ', or '|', not '!' / operator (AND:1, OR:0)
			"", // set collection query (<fieldname:contains:value^weight | value^weight>/option...) and ' ', or '|'
			"", // set boost query (<fieldname:contains:value> | <field3:contains:value>...) and ' ', or '|'
			"", // set filter operation (<fieldname:operator:value>)
			"", // set groupby field(field, count)
			"", // set sort field group(field/order,field/order,...)
			"", // set categoryBoost(fieldname,matchType,boostID,boostKeyword)
			"", // set categoryGroupBy (fieldname:value)
			"", // set categoryQuery (fieldname:value)
			"", // set property group (fieldname,min,max, groupcount)
			"DVS,ED_MODE,DCTN_KND,ALIAS", // use check prefix query filed
			"MDFC_DTTM", // set use check fast access field
			"", // set multigroupby field
			"", // set auth query (Auth Target Field, Auth Collection, Auth Reference Field, Authority Query)
			"", // set Duplicate Detection Criterion Field, RANK/DESC,DATE/DESC
			"doc" // collection display name
			}
			};
		}
	}


    /**
    *  subject: 검색 환경 설정 페이지
    **/

    


/**
 *  file: WNUtils.jsp
 *  subject: ê²ì êµ¬íì íìí ì¼ë° ë©ìëë¥¼ êµ¬ííë¤.
 *  ------------------------------------------------------------------------
 *  @original author: KoreaWISEnut
 *  @edit author: KoreaWISEnut
 *  @update date 2006.12.03
 *  ------------------------------------------------------------------------
 */
    /*
    *	ë¬¸ìì ê´ë ¨ ì¤ì 
    */
    final static String ENCODE_ORI = "EUC-KR";
    final static String ENCODE_NEW = "UTF-8";

	/**
     * ë¬¸ì ë°°ì´ ê°ì ê²ìíì¬ í¤ ê°ì ë¦¬í´
     * @param fieldName
     * @param value
     * @param operation
     * @return
     */
    private int findArrayValue(String find, String[] arr) {
        int findKey = -1;
        for (int i = 0; i < arr.length; i++) {
            if (find.equals(arr[i])){
                findKey = i;
                break;
            }
        }
        return findKey;
    }

    /**
     *
     * @param s
     * @param findStr
     * @param replaceStr
     * @return
     */
    public static String replace(String s, String findStr, String replaceStr){
        int   pos;
        int   index = 0;

        while ((pos = s.indexOf(findStr, index)) >= 0) {
            s = s.substring(0, pos) + replaceStr + s.substring(pos + findStr.length());
            index = pos + replaceStr.length();
        }

        return s;
    }

    /**
     *
     * @param s
     * @return
     */
    public static String trimDuplecateSpace(String s){
        StringBuffer sb = new StringBuffer();
        for(int i=0; i<s.length(); i++){
            char c = s.charAt(i);
            if(i < s.length()-1) {
                if( c == ' ' && s.charAt(i+1)==' '){
                    continue;
                }
            }
            sb.append(c);
        }
        return sb.toString().trim();
    }

    public static String parseDate(String input, String inFormat, String outFormat) {
        String retStr = "";
        Date date = null;
        SimpleDateFormat formatter = null;
        try {
            date = (new SimpleDateFormat(inFormat)).parse(input.trim());
        } catch (ParseException e) {
            e.printStackTrace();
        }
        formatter = new SimpleDateFormat(outFormat);
        retStr = formatter.format(date);
        return retStr;
    }

    public static String getCurrentDate() {
        java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat
                ("yyyy.MM.dd", java.util.Locale.KOREA);
        return dateFormat.format(new java.util.Date());
    }

    /**
     *
     * @param strNum
     * @param def
     * @return
     */
    public static int parseInt(String strNum, int def){
        if(strNum == null) return def;
        try{
            return Integer.parseInt(strNum);
        }catch(Exception e){
            return def;
        }
    }

    /**
     * Stringì ê°ì´ nullì¼ ê²½ì° ""ë¡ ë³ííì¬ ë¦¬í´íë¤.
     * @param temp
     * @return
     */
    public static String checkNull(String temp) {
        if (temp != null) {
            temp = temp.trim();
        } else {
            temp = "";
        }
        return temp;
    }

    /**
     * 1ì°¨ì ë°°ì´ì ê°ì¤ nullì¸ ê°ì ""ë¡ ë³ííì¬ ë¦¬í´íë¤.
     * @param temp
     * @return
     */
    public static String[] checkNull(String[] temp){
        for(int i=0; i<temp.length; i++) {
            temp[i] = checkNull(temp[i]);
        }
        return temp;
    }

    /**
     * 2ì°¨ì ë°°ì´ì ê°ì¤ nullì¸ ê°ì ""ë¡ ë³ííì¬ ë¦¬í´íë¤.
     * @param temp
     * @return
     */
    public static String[][] checkNull(String[][] temp) {
        for(int i=0; i<temp.length; i++) {
            temp[i][0] = checkNull(temp[i][0]);
            temp[i][1] = checkNull(temp[i][1]);
        }
        return temp;
    }

    /**
     * ì¤í¸ë§ì format ì ë§ê² ë³íì íë¤.
     * convertFormat("1", "00") return "01" ë¡ ìë ¥ ê°ì ë¦¬í´íë¤.
     * @param inputStr
     * @param format
     * @return String
     */
    public static String convertFormat(String inputStr, String format){
        int _input = Integer.parseInt(inputStr);
        StringBuffer result = new StringBuffer();
        DecimalFormat df = new DecimalFormat(format);
        df.format( _input, result, new FieldPosition(1) );
        return result.toString();
    }

    /**
     *
     * @param str
     * @param outFormat
     * @return
     */
    public static String numberFormat(String str, String outFormat) {
        return new DecimalFormat(outFormat).format(str);
    }

	/**
     *
     * @param str
     * @return
     */
    public static String numberFormat(int num) {
		return NumberFormat.getNumberInstance().format(num);

    }

    /**
     *
     * @param str
     * @param oriEncode
     * @param newEncode
     * @return
     */
    public static String encoding(String str, String oriEncode, String newEncode) {
        str = checkNull(str);
        if(str.length() > 0) {
            try {
                str = new String(str.getBytes(oriEncode), newEncode);
            } catch (UnsupportedEncodingException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        return str;
    }


    /**
     * êµ¬ë¶ìë¥¼ ê°ì§ê³  ìë ë¬¸ìì´ì êµ¬ë¶ìë¥¼ ê¸°ì¤ì¼ë¡ ëëì´ì£¼ë ë©ìë
     * @param splittee êµ¬ë¶ìë¥¼ ê°ì§ ë¬¸ìì´
     * @param splitChar êµ¬ë¶ì
     * @return
     */
    public static String[] split(String splittee, String splitChar){
        String taRetVal[] = null;
        StringTokenizer toTokenizer = null;
        int tnTokenCnt = 0;

        try {
            toTokenizer = new StringTokenizer(splittee, splitChar);
            tnTokenCnt = toTokenizer.countTokens();
            taRetVal = new String[tnTokenCnt];

            for(int i=0; i<tnTokenCnt; i++) {
                if(toTokenizer.hasMoreTokens())	taRetVal[i] = toTokenizer.nextToken();
            }
        } catch (Exception e) {
            taRetVal = new String[0];
        }
        return taRetVal ;
    }

    /**
     * String ì ë°ì UTF-8 ë²ìë´ ë¬¸ìê° ì´ëê²½ì° ê³µë°±(0x0020) ì¼ë¡ ì¹í
     * @param str
     * @return String
     */
    public static String validate(String str) {
        StringBuffer buf = new StringBuffer();

        char ch;
        for(int i=0; i < str.length(); i++) {
            ch = str.charAt(i);
            if(Character.isLetterOrDigit(ch)) {
            } else {
                if(Character.isWhitespace(ch)) {
                } else {
                    if(Character.isISOControl(ch)) {
                        // UTF-8 ìì ì§ìíì§ ìë ë¬¸ì ì ê±°
                        ch = (char)0x0020;
                    }
                }
            }

            buf.append(ch);
        }

        return buf.toString();
    }

    /**
     * request nullì²´í¬
     **/
    public String getCheckReq(javax.servlet.http.HttpServletRequest req, String parameter, String default_value) {
        String req_value = (req.getParameter(parameter) == null ||  req.getParameter(parameter).equals("")) ? default_value : req.getParameter(parameter);
        return req_value;
    }

    /**
     * request Array nullì²´í¬
     **/
    public String[] getCheckReqs(javax.servlet.http.HttpServletRequest req, String parameter, String[] default_value) {
        String[] req_value = req.getParameterValues(parameter);
        String[] tmp = null;
        int c = 0;
        if(req_value!=null) {
            tmp = new String[req_value.length];
            for(int i=0; i<req_value.length; i++) {
                tmp[c] = req_value[i];
                c++;
            }
        }
        req_value = req.getParameterValues(parameter)!=null ? tmp : default_value;
        return req_value;
    }

	public String replaceURL(String base, String url, String param, String value) {

		String sURL = "";
		if ( url != null && !url.equals("")) {
			if ( url.indexOf(param) < 0 )
				url = url + "&" + param + "=" + value;

			String [] params = url.split("&");
			for ( int idx=0; idx < params.length; idx++ ) {
				if ( params[idx].indexOf(param) >= 0 ) {
					params[idx] = param + "=" + value;
				}

				sURL = sURL + params[idx] ;

				if ( idx + 1 < params.length)
					sURL = sURL + "&" ;

			}

		} else {
				sURL = param + "=" + value;
		}

		sURL = base + "?" + sURL;


		return sURL;

	}

    /**
     * nullì²´í¬
     **/
    public String nvl(String parameter, String default_value) {
        String req_value = parameter !=null ? parameter:default_value;
        return req_value;
    }

    /**
     * request nullì²´í¬, uncoding
     **/
    public String getCheckReqUnocode(javax.servlet.http.HttpServletRequest req, String parameter, String default_value) {
        String req_value = req.getParameter(parameter)!=null ? encoding(req.getParameter(parameter), ENCODE_ORI, ENCODE_NEW):default_value;
        return req_value;
    }

    /**
     * request Array nullì²´í¬, uncoding
     **/
    public String[] getCheckReqsUnocode(javax.servlet.http.HttpServletRequest req, String parameter, String[] default_value) {
        String[] req_value = req.getParameterValues(parameter);
        String[] tmp = null;
        int c = 0;
        if(req_value!=null) {
            tmp = new String[req_value.length];
            for(int i=0; i<req_value.length; i++) {
                tmp[c] = encoding(req_value[i], ENCODE_ORI, ENCODE_NEW);
                c++;
            }
        }
        req_value = req.getParameterValues(parameter)!=null ? tmp : default_value;
        return req_value;
    }

	/**
     * ì¸ê¸°ê²ìì´
     **/
	public String getPopKeyword() {
		String url ="http://127.0.0.1:7800/sample/normal/popword/popword.jsp?target=popword&range=D&collection=_ALL_";
		NodeList list = null;
		int count=0;
		StringBuffer sb = new StringBuffer();
		
		try {
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); //DOM parser factory ìì±
			factory.setIgnoringElementContentWhitespace(true); 
			DocumentBuilder builder = factory.newDocumentBuilder(); //DOM parser ìì±
			Document document = builder.parse(url); //xml ë¬¸ì íì±
			Element eRoot = document.getDocumentElement(); 
			NodeList data = eRoot.getElementsByTagName("Data");
			Element element = (Element) data.item(0);
			list = eRoot.getElementsByTagName("Query");
			count = list.getLength();

			if(list != null){
				for(int i=0; i	< count; i++){
					Element eQuery = (Element)list.item(i);
					String popQuery = eQuery.getTextContent();

					sb.append("<li class=\"ranking\">");
					sb.append("	<ul>");
					sb.append("		<li class=\"ranktxt\"><img src=\"images/"+ eQuery.getAttribute("id")+".gif\" alt=\"\" /> <a href=\"#none\" onclick=\"javascript:doKeyword('" + eQuery.getTextContent() + "');\">" + eQuery.getTextContent() + "</a></li>");
					sb.append("		<li class=\"rankico\">");
					
					if (eQuery.getAttribute("updown") == "U") {
						sb.append("<img src=\"images/ico_up.gif\" alt=\"ìì¹\" />");
					} else if (eQuery.getAttribute("updown") == "D") {
						sb.append("<img src=\"images/ico_down.gif\" alt=\"íë½\" />");
					} else if (eQuery.getAttribute("updown") == "N") {
						sb.append("<img src=\"images/ico_new.gif\" alt=\"ì ê·\" />");
					} else if (eQuery.getAttribute("updown") == "C") {
						sb.append("-");
					}
					
					sb.append("		</li>");
					sb.append("		<li class=\"rankstep\">" + eQuery.getAttribute("count") + "</li>");
					sb.append("		");
					sb.append("	</ul>");
					sb.append("</li>");
				}
			}
			
		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		} catch (SAXException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} 

		return sb.toString();
	}

	/**
	 * ë¬¸ìì ê¸¸ì´ë¥¼ ì§ì ë ê¸¸ì´ë§í¼ ìë¼ì ë°ííë í¨ì<br>
	 * íê¸ê³¼ ìë¬¸,ì«ìì ë°ë¼ì ê¸¸ì´ë¥¼ ë¤ë¥´ê² ê³ì°íë¤.
	 * @param str ë³íí  ë¬¸ìì´<br>
	 * byteLength ë¬¸ìì´ì ê¸¸ì´
	 * @return rtStr ì§ì ë ê¸¸ì´ë¡ ìì ë ë¬¸ìì´ì ë°ííë¤.
	 */
	public static String getSubString(String str, int byteLength) {
		if (str==null) {
			return "";
		}

		StringBuffer rtStr = new StringBuffer();

		rtStr.append(str.substring(0,getLengthInString(str,byteLength)));

		if(rtStr.length() != str.length()) {
			rtStr.append("...");
		}

		return rtStr.toString();
	}


	/**
	 * ë¬¸ìì ê¸¸ì´ë¥¼ íê¸ 2ì ìë¬¸,ì«ìë¥¼ 1ìë¡ ê³ì°íì¬<br>
	 * ë¬¸ìì´ì ê¸¸ì´ë¥¼ ë°ííë í¨ì
	 * @param str ë³íí  ë¬¸ìì´<br>
	 * byteLength ë¬¸ìì´ì ê¸¸ì´
	 * @return int ë¬¸ìì´ì ê¸¸ì´
	 */
	public static int getLengthInString(String str, int byteLength)
	{
		int length = str.length();
		int retLength = 0;
		int tempSize = 0;
		int asc;

		for(int i = 1; i<=length; i++) {
			asc = (int)str.charAt(i-1);
			
			if(asc > 127) {
				if ( byteLength > tempSize ) {
					tempSize += 2;
					retLength++;
				}
			} else {
				if ( byteLength > tempSize ) {
					tempSize++;
					retLength++;
				}
			}
		}

		return retLength;
	}
 
    /**
     * request XSS ì²ë¦¬
     **/
    public String getCheckReqXSS(javax.servlet.http.HttpServletRequest req, String parameter, String default_value) {
        String req_value = (req.getParameter(parameter) == null ||  req.getParameter(parameter).equals("")) ? default_value : req.getParameter(parameter);
        req_value = req_value.replaceAll("</?[a-zA-Z][0-9a-zA-Zê°-\uD7A3ã±-ã=/\"\'%;:,._()\\-# ]+>","");
        req_value = req_value.replaceAll(">","");
        req_value = req_value.replaceAll(">","");
        return req_value;
    }


/**
*  file: WNCommon.jsp
*  subject: Search Formula-1 API Wrapper í´ëì¤
*  ------------------------------------------------------------------------
*  @original author: WISEnut
*  @edit author: WISEnut
*  @update date 2012.04.24
*  ------------------------------------------------------------------------
*/
public class WNCommon {
   private Search search = null;
   private JspWriter out = null;
   boolean isDebug = false;

   /**
    * SF-1 Search í´ëì¤ ê°ì²´ë¥¼ ìì±íë WNCommonì ìì±ì í¨ìì´ë¤.
    */
   public WNCommon() {
       this.search = new Search();
   }

   /**
    * WNCommon ì¤ë²ë¡ë©(overloading) í¨ìì´ë¤.
    * WNCommonì ë¨ëì¼ë¡ ì¬ì©í  ê²½ì° debug ì¬ì©ì ë¬´ë¥¼ ì§ì í  ì ìë¤.
    * @param out
    * @param isDubug
    */
   public WNCommon(JspWriter out, boolean isDubug) {
       this.search = new Search();
       this.out = out;
       this.isDebug = isDubug;
   }

   /**
    * ê²ì ì§ì í¤ìëì ì§ìë ì¶ë ¥ì ì¬ì©ë  ë¬¸ìì§í©ì ì íë¤.
    * v4.x í¸í methodì´ë¯ë¡ COMMON_OR_WHEN_NORESULTì ì§ì íì§ ìëë¤.
    * @param query
    * @param charSet
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    * @deprecated  As of v4.x, replaced by
    * {@link #setCommonQuery(String,String,int)}
    */
   public int setCommonQuery(String query, String charSet) {
       int ret = 0;
       ret = search.w3SetCodePage(charSet);
       ret = search.w3SetQueryLog(1);
       ret = search.w3SetTraceLog(0);
       ret = search.w3SetCommonQuery(query, 0);
       return ret;
   }

    /**
    * ê²ì ì§ì UIDì ì§ìë ì¶ë ¥ì ì¬ì©ë  ë¬¸ìì§í©ì ì íë¤.
    * @param charSet
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int setUidQuery(String charSet) {
       int ret = 0;
       ret = search.w3SetCodePage(charSet);
       ret = search.w3SetQueryLog(0);
       return ret;
   }

   /**
    * ê²ì ì§ì í¤ìëì ì§ìë ì¶ë ¥ì ì¬ì©ë  ë¬¸ìì§í©ì ì íë¤.
    * @param query
    * @param charSet
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int setCommonQuery(String query, String charSet, int useOrResult, boolean useSuggestedQuery) {
       int ret = 0;
       ret = search.w3SetCodePage(charSet);
       ret = search.w3SetQueryLog(1);
       ret = search.w3SetTraceLog(0);
       ret = search.w3SetCommonQuery(query, useOrResult);
       if(useSuggestedQuery) {
           ret = search.w3SetSpellCorrectionQuery(query, 0);
       }
       return ret;
   }

   /**
    * setCommonQueryì ì¤ë²ë¡ë©(overloading) í¨ìë¡
    * sessionì ë³´ë¥¼ ë¶ê°ê¸°ë¥ì¼ë¡ ì¬ì©í  ì ìë¤.
    * v4.x í¸í methodì´ë¯ë¡ COMMON_OR_WHEN_NORESULTì ì§ì íì§ ìëë¤.
    * @param query
    * @param charSet
    * @param logInfo
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    * @deprecated  As of v4.x, replaced by
    * {@link #setCommonQuery(String,String,String[],int)}
    */
   public int setCommonQuery(String query, String charSet, String[] logInfo) {
       int ret = 0;
       if (logInfo != null && logInfo.length > 2) {
           ret = search.w3SetSessionInfo(logInfo[0], logInfo[1], logInfo[2]);
       }
       setCommonQuery(query, charSet);
       return ret;
   }


   /**
    * setCommonQueryì ì¤ë²ë¡ë©(overloading) í¨ìë¡
    * sessionì ë³´ë¥¼ ë¶ê°ê¸°ë¥ì¼ë¡ ì¬ì©í  ì ìë¤.
    * @param query
    * @param charSet
    * @param logInfo
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int setCommonQuery(String query, String charSet, int useOrResult, String[] logInfo) {
       int ret = 0;
       if (logInfo != null && logInfo.length > 2) {
           ret = search.w3SetSessionInfo(logInfo[0], logInfo[1], logInfo[2]);
       }
       ret = search.w3SetCodePage(charSet);
       ret = search.w3SetQueryLog(1);
       ret = search.w3SetCommonQuery(query, useOrResult);
       return ret;
   }

   /**
    * setCommonQueryì ì¤ë²ë¡ë©(overloading) í¨ìë¡
    * sessionì ë³´ë¥¼ ë¶ê°ê¸°ë¥ì¼ë¡ ì¬ì©í  ì ìë¤.
    * @param query
    * @param charSet
    * @param logInfo
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int setCommonQuery(String query, String charSet, int useOrResult, boolean useSuggestedQuery, String[] logInfo) {
       int ret = 0;
       if (logInfo != null && logInfo.length > 2) {
           ret = search.w3SetSessionInfo(logInfo[0], logInfo[1], logInfo[2]);
       }
       ret = search.w3SetCodePage(charSet);
       ret = search.w3SetQueryLog(1);
       ret = search.w3SetCommonQuery(query, useOrResult);
       if(useSuggestedQuery) {
           ret = search.w3SetSpellCorrectionQuery(query, 0);
       }
       return ret;
   }

   /**
    * ì»¬ë ì ë³ë¡ ê²ìì´ ì§ì 
    * @param collectionName
    * @param query
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int setCollectionQuery(String collectionName, String query) {
       return search.w3SetCollectionQuery(collectionName, query);
   }


   /**
    * ì»¬ë ì ë³ë¡ boost query ì§ì 
    * @param collectionName
    * @param boost query
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int setBoostQuery(String collectionName, String query) {
       int idx = query.lastIndexOf("/");
       int option = Integer.parseInt(query.substring(idx, query.length()));
       return search.w3SetBoostQuery(collectionName, query, option);
   }

   /**
    * ì»¬ë ì ë³ë¡ boost query ì§ì 
    * @param collectionName
    * @param boost query
    * @param option 0,1,2
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int setBoostQuery(String collectionName, String query, int option) {
       return search.w3SetBoostQuery(collectionName, query, option);
   }

   /**
    * ê²ìíê³ ì íë ì»¬ë ìì UIDë¥¼ ì¤ì íë¤.
    * @param collectionName
    * @param values
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int setUid(String collectionName, String[] values,
           String searcherId) {
       int ret = 0;
       for (int i = 0; i < values.length; i++) {
           long uid = 0L;
           try {
               uid = Long.parseLong(values[i]);
           } catch (NumberFormatException e) {
               return -1;
           }
           ret = search.w3AddUid(collectionName, uid, searcherId);
       }
       return ret;
   }

   /**
    * ê²ìëì ì»¬ë ì, ì¸ì´ë¶ìê¸° ì¬ì©ì ë¬´, ëìë¬¸ì êµ¬ë¶ì ë¬´ë¥¼ ì¤ì íë¤.
    * v4.x í¸í methodì´ë¯ë¡ USEORIGINAL, USESYNONYMì ì§ì íì§ ìëë¤.
    * @param collectionName
    * @param useKma
    * @param isCase
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    * @deprecated  As of v4.5, replaced by
    * {@link #addCollection(String,int,int,int,int,int)}
    */
   public int addCollection(String collectionName, int useKma, int isCase) {
       int ret = 0;
       ret = search.w3AddCollection(collectionName);
        //USEMA, ISCASE, USEORIGINAL, USESYNONYM
       ret = search.w3SetQueryAnalyzer(collectionName, useKma, isCase, 1,1);
       ret = search.w3SetDuplicateDetection(collectionName);
       //systemOut("[w3AddCollection] "+collectionName);
       return ret;
   }

   /**
    * ê²ìëì ì»¬ë ì, ì¸ì´ë¶ìê¸° ì¬ì©ì ë¬´, ëìë¬¸ì êµ¬ë¶ì ë¬´ë¥¼ ì¤ì íë¤.
    * @param collectionName
    * @param useKma
    * @param isCase
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int addCollection(String collectionName, int useKma, int isCase,
           int useOriginal, int useSynonym, int duplicateDectection) {
       int ret = 0;
       ret = search.w3AddCollection(collectionName);
       //USEMA, ISCASE, USEORIGINAL, USESYNONYM
       ret = search.w3SetQueryAnalyzer(collectionName, useKma, isCase, useOriginal, useSynonym);
       //systemOut("[w3AddCollection] "+collectionName);
       if(duplicateDectection == 1) {
           ret = search.w3SetDuplicateDetection(collectionName);
       }
       return ret;
   }

   /**
    * ì¶ì ì»¬ë ì ì¶ê°
    * v4.x í¸í methodì´ë¯ë¡ USEORIGINAL, USESYNONYMì ì§ì íì§ ìëë¤.
    * @param aliasName ì¤ì í ë³ì¹­ ì»¬ë ìëª
    * @param collectionName ì¤ì  ì»¬ë ì
    * @param useKma
    * @param isCase
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    * @deprecated  As of v4.5, replaced by
    * {@link #addAliasCollection(String,String,int,int,int,int,int)}
    */
   public int addAliasCollection(String aliasName, String collectionName,
           int useKma, int isCase) {
       int ret = 0;
       ret = search.w3AddAliasCollection(aliasName, collectionName);
       ret = search.w3SetQueryAnalyzer(aliasName, useKma, isCase, 1, 1);
       ret = search.w3SetDuplicateDetection(aliasName);
       return ret;
   }

   /**
    * ì¶ì ì»¬ë ì ì¶ê°
    * @param aliasName ì¤ì í ë³ì¹­ ì»¬ë ìëª
    * @param collectionName ì¤ì  ì»¬ë ì
    * @param useKma
    * @param isCase
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int addAliasCollection(String aliasName, String collectionName,
           int useKma, int isCase, int useOriginal, int useSynonym, int duplicateDectection) {
       int ret = 0;
       ret = search.w3AddAliasCollection(aliasName, collectionName);
       ret = search.w3SetQueryAnalyzer(aliasName, useKma, isCase,
               useOriginal, useSynonym);
       if(duplicateDectection == 1) {
           ret = search.w3SetDuplicateDetection(aliasName);
       }
       return ret;
   }

   /**
    * ê²ìê¸° ì°ê²°
    * @param ip
    * @param port
    * @param timeOut
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int getConnection(String ip, int port, int timeOut) {
       int ret = search.w3ConnectServer(ip, port, timeOut);
       return ret;
   }

   /**
    * í´ë¹ ì»¬ë ìì ê²ì ëì íëë¥¼ ì¬ë¬ ê°ë¥¼ ì¤ì íë¤.
    * v4.x í¸í methodì´ë¯ë¡ fieldscoreë¥¼ ì§ì íì§ ìëë¤.
    * @param collectionName
    * @param fields
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    * @deprecated  As of v4.5, replaced by
    * {@link #setSearchField(String,String)}
    **/
   public int addSearchField(String collectionName, String[] fields) {
       int ret = 0;
       for (int i = 0; i < fields.length; i++) {
           ret = search.w3AddSearchField(collectionName, fields[i]);
           systemOut("[w3AddSearchField] " + collectionName + " / "
                   + fields[i]);
       }
       return ret;
   }

    /**
    * ê²ì íëë³ ë­í¹ ì¤ì½ì´(score)ë¥¼ ì¤ì íë¤.
    * @param collectionName
    * @param fields TITLE,CONTENT
    * @param rankScores 100,30
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int addSearchFieldScore(String collectionName, String[] fields, int[] rankScores) {
       int ret = 0;
       for (int i = 0; i < fields.length; i++) {
           ret = search.w3AddSearchFieldScore(collectionName, fields[i], rankScores[i]);
           systemOut("[w3AddSearchFieldScore] " + collectionName + " / "+ fields[i] + "/" + rankScores[i]);
       }
       return ret;
   }

   /**
    * í´ë¹ ì»¬ë ìì ê²ì ëì íëë¥¼ ì¬ë¬ ê°ë¥¼ ì¤ì íë¤.
    * @param collectionName
    * @param fields TITLE/100,CONTENT/30
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int setSearchField(String collectionName, String fields) {
       int ret = 0;
       String[] searchFieldTemp = split(fields, ","); //TITLE/100,CONTENT/30
       for (int i = 0; i < searchFieldTemp.length; i++) {
           String[] searchField = split(searchFieldTemp[i], "/");
           if (searchField != null && searchField.length > 0) {
               ret = search.w3AddSearchField(collectionName,
                       searchField[0]);
               systemOut("[w3AddSearchField] " + collectionName + " / "+ searchField[0]);
           }
       }
       ret = search.w3SetSearchFieldScore(collectionName, fields);
       systemOut("[w3AddSearchField] " + collectionName + " / " + fields);
       return ret;
   }



   /**
    * ê²ìê²°ê³¼ì ì ë ¬íëë¥¼ ì¤ì íë¤.
    * v4.x í¸í method
    * @param collectionName
    * @param sortField
    * @param sortOrder
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    * @deprecated  As of v4.5, replaced by
    * {@link #setSortField(String,String)}
    */
   public int addSortField(String collectionName, String sortField, int sortOrder) {
       int ret = 0;
       ret = search.w3AddSortField(collectionName, sortField, sortOrder);
       systemOut("[w3AddSortField] " + collectionName + " / " + sortField);
       return ret;
   }

   /**
    * ê²ìê²°ê³¼ì ì ë ¬íëë¥¼ ì¤ì íë¤.
    * @param collectionName
    * @param sortValue
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int setSortField(String collectionName, String sortValue) {
       int ret = 0;
       ret = search.w3SetSortField(collectionName, sortValue);
       systemOut("[w3SetSortField] " + collectionName + " / " + sortValue);
       return ret;
   }

   /**
    * ê²ìê²°ê³¼ RANKINGì ì¤ì íë¤. SF-1 v5.0 ì ê· ì¶ê° method.
    * @param collectionName
    * @param method ë­í¹ ë©ìë( basic, custom, BM25 )
    * @param option
       - p( proximity )
       - r( field weight )
       - k( multi keyword factor )
       - f( frequency )
       - m( morpheme )
       - o( offset )
       - l( length )
    * @param maxcount Ranking íê¸°ì MAX ê°. (ì) %ë¡ íê¸°í  ì 100
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
   */
   public int setRanking(String collectionName, String method, String option, int maxcount) {
       return search.w3SetRanking(collectionName, method, option, maxcount);
   }

   /**
   * ê²ìí ê²°ê³¼ ë­í¬ê°ì ëí ë²ìë¥¼ ì§ì 
   * @param collectionName Collection ì´ë¦
   * @param minRank ìµì ë­í¹ ê°
   * @param maxRank ìµë ë­í¹ ê°
   * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
   */
   public int setRankRange(String collectionName, int minRank, int maxRank) {
       return search.w3SetRankRange(collectionName, minRank, maxRank);

   }

   /**
    *
    * @param collectionName
    * @param fieldNameValues
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int setPrefixQuery(String collectionName,
           String fieldNameValues) {
       //valueê°ì /ê° ìì ì ìì¼ë¯ë¡ >/ë¡ ì°¾ìì queryì ì°ì°ìë¥¼ ë¶ë¦¬íë¤.
       fieldNameValues = fieldNameValues.trim();
       int index = fieldNameValues.lastIndexOf("/");
       String prefixQuery = "";
       int operator = 1;
       if(index != -1) {
           prefixQuery = fieldNameValues.substring(0, index);
           String temp = fieldNameValues.substring(index+1, fieldNameValues.length());
           temp = temp.trim();
           operator = Integer.parseInt(temp);
       }else{
           prefixQuery = fieldNameValues.trim();
       }
       int ret = search.w3SetPrefixQuery(collectionName, prefixQuery, operator);
       systemOut("[w3SetPrefixQuery]" + fieldNameValues);
       return ret;
   }

   /**
    *
    * @param collectionName
    * @param fieldNameValues
    * @return  ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int setFilterOperation(String collectionName, String fieldNameValues) {
       int ret = search.w3SetFilterQuery(collectionName, fieldNameValues);
       systemOut("[w3SetFilterQuery]" + fieldNameValues);
       return ret;
   }

   /**
    *
    * @param collectionName
    * @param fieldNameValues
    * @return  ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int setFilterQuery(String collectionName, String fieldNameValues) {
       int ret = search.w3SetFilterQuery(collectionName, fieldNameValues);
       systemOut("[w3SetFilterQuery]" + fieldNameValues);
       return ret;
   }

   /**
   * setResultFieldìì ì§ì í ê²°ê³¼ íëë¤ì ê°ì ì»ë í¨ìì´ë¤.
   * v4.x í¸í methodì´ë¤. displaylengthë¥¼ ì§ì íì§ ìì¼ë¯ë¡ ì£¼ìí´ì¼íë¤.
   * @param collectionName
   * @param fields
   * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
   * @deprecated  As of v4.5, replaced by
   * {@link #setResultField(String,String)}
   */
   public int setResultField(String collectionName, String[] fields) {
       int ret = 0;
       for(int i=0; i< fields.length; i++) {
           ret = search.w3AddDocumentField(collectionName, fields[i], 0);
           systemOut("[w3AddDocumentField] " + collectionName + " / " + fields[i]);
       }
       return ret;
   }

   /**
    * setResultFieldìì ì§ì í ê²°ê³¼ íëë¤ì ê°ì ì»ë í¨ìì´ë¤.
    * @param collectionName
    * @param fields
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int setResultField(String collectionName, String fields) {
       int ret = 0;
       ret = search.w3SetDocumentField(collectionName, fields);
       systemOut("[w3SetDocumentField] " + collectionName + " / " + fields);
       return ret;
   }

   /**
    * í´ë¹ ì»¬ë ìì ëª ë²ì§¸ ê²ì ê²°ê³¼ë¶í° ëª ê°ë¥¼
    * ê°ì ¸ì¬ ê²ì¸ì§ë¥¼ ì§ì íê³  íì´ë¼ì´í¸ ê¸°ë¥ê³¼ ìì½ê¸°ë¥ì ì§ì íë í¨ìì´ë¤.
    * ê²ì API v3.5ììë w3SetHighlightì íë¼ë¯¸í°ê° 2ê°ì´ì§ë§ v3.7ììë 3ê°ì´ë¤.
    * @param collName
    * @param highlight
    * @param startPos
    * @param resultCnt
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int setPageInfo(String collName, int highlight, int startPos,
           int resultCnt) {
       int ret = 0;
       if (highlight == 1) { //OFF, ON
           ret = search.w3SetHighlight(collName, 0, 1);
       } else if (highlight == 2) { //ON , OFF
           ret = search.w3SetHighlight(collName, 1, 0);
       } else if (highlight == 3) { //ON, ON
           ret = search.w3SetHighlight(collName, 1, 1);
       } else {//OFF, OFF
           ret = search.w3SetHighlight(collName, 0, 0);
       }
       // íì´ì§, ê¸°ë³¸ì ë ¬ ì¤ì 
       ret = search.w3SetPageInfo(collName, startPos, resultCnt);

       return ret;
   }

   /**
    * ê²ìí ê²°ê³¼ ë ì§/ìê° ë²ìë¥¼ ì§ì íê³ 
    * ììë ì§ì ì¢ë£ë ì§ì íìì´ YYYY/MM/DDê° ìëë¼ë©´
    * ë³ê²½í  ë¬¸ìë¥¼ ì¸ìë¡ ì§ì íë¤.
    * @param collectionName
    * @param startDate
    * @param endDate
    * @param replaceChr
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int setDateRange(String collectionName, String startDate,
           String endDate, String replaceChr) {
       // ë ì§ ì¡°ê±´ ì¸í
       int ret = 0;
       if (!startDate.equals("") && !endDate.equals("")) {
           startDate = replace(startDate, replaceChr, "/");
           endDate = replace(endDate, replaceChr, "/");
           ret = search.w3SetDateRange(collectionName, startDate, endDate);
       }
       return ret;
   }

   /**
    *
    * @param collectionName
    * @param field
    * @param matchType
    * @param boostID
    * @param boostKeyword
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int setBoostCategory(String collectionName,
           String field, String matchType, String boostKeyword) {
       return search.w3SetBoostCategory(collectionName, field, matchType, boostKeyword);
   }
	
   /**
    * ê²ìê²°ê³¼ìì ì¤ë³µë¬¸ì ì ë ¬ ê¸°ì¤ì ì¤ì íë¤.
    * @param collectionName Collection ëª
     * @param categoryGroup Category ê·¸ë£¹ì ë³´
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int addDuplicateDetectionCriterionField(String collection, String field, int nOrder) {        	
   	int ret = -1;
   	ret = search.w3AddDuplicateDetectionCriterionField(collection, field, nOrder);
       return ret;
   }
   
   
   /**
    * ê²ìê²°ê³¼ìì ì¤ë³µë¬¸ì ì ë ¬ ê¸°ì¤ì ì¤ì íë¤.
    * @param collectionName Collection ëª
     * @param categoryGroup Category ê·¸ë£¹ì ë³´
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int setDuplicateDetectionCriterionField(String collection, String fieldList ) {        	
   	int ret = -1;
   	ret = search.w3SetDuplicateDetectionCriterionField(collection, fieldList);
       return ret;
   }
   
   /**
    * ê²ìê²°ê³¼ í¨í·ì ì¹´íê³ ë¦¬ ì§ì  ì»¬ë ìì ì¹´íê³ ë¦¬ íëìì Depthë³ Categoryì ë¦¬ì¤í¸ë¥¼ í¬í¨ìí¨ë¤.
    * @param collectionName Collection ëª
     * @param categoryGroup Category ê·¸ë£¹ì ë³´
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int addCategoryGroupBy(String collectionName, String[] categoryGroup) {        	
   	int ret = -1;
       int length = categoryGroup.length;
       for(int i=0; i < length; i++) {
      		String[] dataFields = split(categoryGroup[i], ":");
			if(dataFields.length == 2){
				//depthList depthì listë¥¼ ì½¤ë§(:) ë¡ êµ¬ë¶íì¬ ìë ¥
				ret = search.w3AddCategoryGroupBy(collectionName, dataFields[0], dataFields[1]);
			}
       }
       return ret;
   }

    /**
    * ì íí ì»¬ë ì ë´ì ì í ì¹´íê³ ë¦¬ íëì ê°ì¼ë¡ ê²ìê²°ê³¼ë¥¼ íí°ë§ íë¤.
    * í¹ì ë¤ë¥¸ ì¿¼ë¦¬ìì´ ë³¸ì¿¼ë¦¬ë¥¼ ì¤ííë©´ í´ë¹ ì¹´íê³ ë¦¬ì ê°ì ë§¤ì¹ëë ë¬¸ìë¥¼ ì¶ë ¥íë¤.
    * @param collectionName Collection ëª
    * @param categoryQuery
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int addCategoryQuery(String collectionName, String[] categoryQuery) {
  		int ret = -1;
       int length = categoryQuery.length;
       for(int i=0; i < length; i++) {
      	String[] dataFields = split(categoryQuery[i], "|");
			if(dataFields.length == 2){
				ret = search.w3AddCategoryQuery(collectionName, dataFields[0], dataFields[1]);
			}
       }
       return ret;
   }

   /**
    * w3SetCategoryGroupByë¥¼ íµí´ í¨í·ì í¬í¨ë í´ë¹ collection-field-depthë¥¼ keyë¡ íë
     * ì¹´íê³ ë¦¬ì ì´ ê°ìë¥¼ ë°í
    * @param collectionName ê²ì ëì collectionëª
     * @param fieldName Category Field ëª
     * @param depth íì¬ ê·¸ë£¹ííì¬ ë³´ê³ ì íë depth
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int getCategoryCount(String collectionName, String field, int depth) {
       return search.w3GetCategoryCount(collectionName, field, depth);
   }

   /**
    * w3SetCategoryGroupByë¥¼ íµí´ í¨í·ì í¬í¨ë í´ë¹ collection-field-depthë¥¼ keyë¡ íë
     * ì¹´íê³ ë¦¬ ì¤ categoryIdxë²ì§¸ì ìì í ì¹´íê³ ë¦¬ ì´ë¦ì ë°í
    * @param collectionName ê²ì ëì collectionëª
     * @param fieldName Category Field ëª
     * @param depth íì¬ ê·¸ë£¹ííì¬ ë³´ê³ ì íë depth
     * @param idx í´ë¹ ì»¬ë ì-ì¹´íê³ ë¦¬-Depthì í´ë¹íë ì¹´íê³ ë¦¬ ê²°ê³¼ì ì¸ë±ì¤
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public String getCategoryName(String collectionName, String field, int depth, int idx){
       return search.w3GetCategoryName(collectionName, field, depth, idx);
   }

    /**
    * w3SetCategoryGroupByë¥¼ íµí´ í¨í·ì í¬í¨ë í´ë¹ collection-field-depthë¥¼ keyë¡ íë ì¹´íê³ ë¦¬ ì¤
     * categoryIdxë²ì§¸ì ì¹´íê³ ë¦¬ìì ëª ê°ì ë¬¸ìê° í¬í¨ëì´ìëì§(ê²ì ê²°ê³¼ë´ìì)ë¥¼ ë°í
    * @param collectionName ê²ì ëì collectionëª
     * @param fieldName Category Field ëª
     * @param depth íì¬ ê·¸ë£¹ííì¬ ë³´ê³ ì íë depth
     * @param idx í´ë¹ ì»¬ë ì-ì¹´íê³ ë¦¬-Depthì í´ë¹íë ì¹´íê³ ë¦¬ ê²°ê³¼ì ì¸ë±ì¤
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int getDocumentCountInCategory(String collectionName, String field, int depth, int idx){
       return search.w3GetDocumentCountInCategory(collectionName, field, depth, idx);
   }

   /**
   * í¹ì  íëì ê°ì ê¸°ì¤ì¼ë¡ ë²ì ë³ë¡ ê·¸ë£¹ì ë§ë¤ê±°ë, ì´ íë ê°ì´ í¹ì  ë²ìì ìíë ë ì½ëë§ ì¶ì¶
   * @ collectionName
   * @ field
   * @ min
   * @ max
   * @ groupCount
   */
   public int setPropertyGroup(String collectionName, String field, int min, int max, int groupCount) {
       int ret = 0;
       ret = search.w3SetPropertyGroup(collectionName, field, min, max, groupCount);
       return ret;
   }

   /**
    * v3.7ììë 2ê°ì ì ë¬ì¸ì v4.0ììë 3ê°ì ì ë¬ì¸ì
    * @param collectionName
    * @param field
    * @param docCount
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int setGroupBy(String collectionName, String field, int docCount) {
       int ret = 0;
       ret = search.w3SetGroupBy(collectionName, field, docCount);
       return ret;
   }

   /**
     * ë¨ìí ìµì¢ ê²°ê³¼ìì í¹ì  íë(ë¤)ê°ì ê·¸ë£¹íë ê²°ê³¼ë¥¼ ì»ì´ì¤ê¸° ìí  ë ì¬ì©
     * @param collectionName ì»¬ë ìëª
     * @param fieldName ê·¸ë£¹íí  íëëª
     * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int addMultiGroupBy(String collectionName, String fields) {
       int ret = 0;
       String[] field = split(fields, ",");
       int length = field.length;
       for(int i = 0; i < length; i++ ) {
           ret = search.w3AddMultiGroupBy(collectionName, field[i]);
       }
       return ret ;
   }

   public int setMultiGroupBy (String collectionName, String fields) {
       return search.w3SetMultiGroupBy(collectionName, fields);
   }

   /**
     * ë©í° ê·¸ë£¹ë°ì´ë ê²°ê³¼ë¥¼ ë°í
     * @param collectionName ì»¬ë ìëª
     * @param fieldName ê·¸ë£¹íí  íëëª
     * @return ì±ê³µ ì í´ë¹ ì»¬ë ì ê²°ê³¼ìì ì¸ìë¡ ì£¼ì´ì§ íëì ê·¸ë£¹í ê²°ê³¼ ë¬¸ìì´ì ë°ííë©°, ìë¬ ë°ìì ë¹ ë¬¸ìì´ì ë°í
    */
   public String getMultiGroupByResult(String collectionName, String field) {
       String ret = "";
       ret = search.w3GetMultiGroupByResult(collectionName, field);
       return ret ;
   }

   /**
    * ê·¸ë£¹ ê²ìê²°ê³¼ì ì ë ¬íëë¥¼ ì¤ì íë¤.
    * @param collectionName
    * @param sortField
    * @param sortOrder
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int addSortFieldInGroup(String collectionName, String sortField,
           int sortOrder) {
       int ret = 0;
       ret = search.w3AddSortFieldInGroup(collectionName, sortField,
               sortOrder);
       systemOut("[w3AddSortFieldInGroup] " + collectionName + " / "
               + sortField);
       return ret;
   }

   /**
    * ê·¸ë£¹ë´ì ë¬¸ìë¤ì ì ë ¬ ì ë³´ë¤ì ì§ì í´ ì£¼ë í¨ì
    * @param collectionName
    * @param sortValue url/DESC,RANK/DESC,DATE/ASC
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int setSortFieldInGroup(String collectionName, String sortValue) {
       int ret = 0;
       ret = search.w3SetSortFieldInGroup(collectionName, sortValue);
       systemOut("[w3SetSortFieldInGroup] " + collectionName + " / " + sortValue);
       return ret;
   }


   /**
    * ê¶í ì¿¼ë¦¬ (Authority Query)
    * @param collection
    * @param authTargetField
    * @param authCollection
    * @param authReferField
    * @param authorityQuery
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int setAuthorityQuery(String collection, String authTargetField,
           String authCollection, String authReferField, String authorityQuery ) {
       int ret = search.w3SetAuthorityQuery(collection, authTargetField,
               authCollection, authReferField, authorityQuery);
       systemOut("[w3SetAuthorityQuery]" + authorityQuery);
       return ret;
   }

   /**
    *
    * @param collectionName
    * @return ê²ìê¸°ë¡ë¶í° ë°ìì¨ ìì± ê·¸ë£¹ì ê°ìë¥¼ ë°í
    */
   public int getCountPropertyGroup(String collectionName) {
       return search.w3GetCountPropertyGroup(collectionName);
   }

   /**
    *
    * @param collectionName
    * @return ì ì²´ ê·¸ë£¹ ê°ì
    */
   public int getResultGroupCount(String collectionName) {
       return search.w3GetResultGroupCount(collectionName);
   }


   /**
    *
    * @param collectionName
    * @return ì ì²´ ê·¸ë£¹ ê°ì
    */
   public int getResultTotalGroupCount(String collectionName) {
       return search.w3GetResultTotalGroupCount(collectionName);
   }

   /**
    *
    * @param collectionName
    * @parma groupIndex
    * @return ê·¸ë£¹ì ìíë ë¬¸ì ì¤ ê°ì ¸ì¨ ë¬¸ì ê°ì
    */
   public int getCountInGroup(String collectionName, int groupIndex) {
       return search.w3GetCountInGroup(collectionName, groupIndex);
   }

   /**
    *
    * @param collectionName
    * @parma groupIndex
    * @return ê·¸ë£¹ì ìíë ì ì²´ë¬¸ì ê°ì
    */
   public int getTotalCountInGroup(String collectionName, int groupIndex) {
       return search.w3GetTotalCountInGroup(collectionName, groupIndex);
   }


   /**
    *
    * @param collectionName
    * @return ì±ê³µì í´ë¹ ìì± ê·¸ë£¹ì ìµìê°ì ë°ííë©°, ìë¬ ë°ìì ììë¥¼ ë°í
    */
   public int getMinValuePropertyGroup(String collectionName){
       return search.w3GetMinValuePropertyGroup(collectionName);
   }

   /**
    *
    * @param collectionName
    * @return ì±ê³µì í´ë¹ ìì± ê·¸ë£¹ì ìµëê°ì ë°ííë©°, ìë¬ ë°ìì ììë¥¼ ë°í
    */
   public int getMaxValuePropertyGroup(String collectionName){
       return search.w3GetMaxValuePropertyGroup(collectionName);
   }

   /**
    *
    * @param collectionName
    * @parma groupIndex
    * @return ì±ê³µì ìì± ê·¸ë£¹ ê²°ê³¼ì ìµìê°ì ë°ííë©°, ìë¬ ë°ìì ììë¥¼ ë°í
    */
   public int getMinValueInPropertyGroup(String collectionName, int groupIndex){
       return search.w3GetMinValueInPropertyGroup(collectionName, groupIndex);
   }

   /**
    *
    * @param collectionName
    * @parma groupIndex
    * @return ì±ê³µì ìì± ê·¸ë£¹ ê²°ê³¼ì ìµëê°ì ë°ííë©°, ìë¬ ë°ìì ììë¥¼ ë°í
    */
   public int getMaxValueInPropertyGroup(String collectionName, int groupIndex){
       return search.w3GetMaxValueInPropertyGroup(collectionName, groupIndex);
   }


   /**
    *
    * @param collectionName
    * @parma groupIndex
    * @return ì§ì ë ìì± ê·¸ë£¹ ë´ ë¬¸ìê°ìë¥¼ ë°í
    */
   public int getDocumentCountInPropertyGroup(String collectionName, int groupIndex){
       return search.w3GetDocumentCountInPropertyGroup(collectionName, groupIndex);
   }

   /**
    * ê·¸ë£¹íë ë¬¸ì ì¤ ì§ì ë ììì ê·¸ë£¹ ë´ìì ì£¼ì´ì§ collection ê²°ê³¼ ìì index ë²ì§¸ ë¬¸ìì Collection IDë¥¼ ë°í
    * @param collectionName
    * @param groupIndex
    * @param docIndex
    * @return ê·¸ë£¹ì ìíë ë¬¸ìì¤ ìíë ë¬¸ìì íëê°
    */
   public String getCollectionIdInGroup(String collectionName,	int groupIndex, int docIndex) {
       return search.w3GetCollectionIdInGroup(collectionName, groupIndex, docIndex);
   }

   /**
    *
    * @param collectionName
    * @param groupIndex
    * @param docIndex
    * @return ê·¸ë£¹ì ìíë ë¬¸ìì¤ ìíë ë¬¸ìì íëê°
    */
   public long getRankInGroup(String collectionName,	int groupIndex, int docIndex) {
       return search.w3GetRankInGroup(collectionName, groupIndex, docIndex);
   }

   /**
    *
    * @param collectionName
    * @param groupIndex
    * @param docIndex
    * @return ê·¸ë£¹ì ìíë ë¬¸ìì¤ ìíë ë¬¸ìì íëê°
    */
   public String getFieldInGroup(String collectionName, String fieldName,
           int groupIndex, int docIndex) {
       return search.w3GetFieldInGroup(collectionName, fieldName,
               groupIndex, docIndex);
   }

   /**
    *
    * @param collectionName
    * @param groupIndex
    * @param docIndex
    * @return ê·¸ë£¹ì ìíë ë¬¸ìì¤ ìíë ë¬¸ìì uidê°
    */
   public long getUidInGroup(String collectionName, int groupIndex,
           int docIndex) {
       return search.w3GetUidInGroup(collectionName, groupIndex, docIndex);
   }

   /**
    *
    * @param collectionName
    * @param groupIndex
    * @param docIndex
    * @return ê·¸ë£¹ì ìíë ë¬¸ìì¤ ìíë ë¬¸ìì ê°ì¤ì¹ ê°
    */
   public long getWeightInGroup(String collectionName, int groupIndex,
           int docIndex) {
       return search.w3GetWeightInGroup(collectionName, groupIndex,
               docIndex);
   }

   /**
    *
    * @param collectionName
    * @param groupIndex
    * @param docIndex
    * @return ê·¸ë£¹ì ìíë ë¬¸ìì¤ ìíë ë¬¸ìì ë ì§ ì ë³´
    */
   public String getDateInGroup(String collectionName, int groupIndex,
           int docIndex) {
       return search
               .w3GetDateInGroup(collectionName, groupIndex, docIndex);
   }

   /**
    *
    * @param collectionName
    * @param groupIndex
    * @param docIndex
    * @return ê·¸ë£¹ì ìíë ë¬¸ìì¤ ìíë ë¬¸ìì sc ì ë³´
    */
   public String getSearcherIdInGroup(String collectionName, int groupIndex,
           int docIndex) {
       return search.w3GetSearcherIdInGroup(collectionName, groupIndex, docIndex);
   }


   /**
    * v4.x í¸í method
    * v5.0ììë ì­ì ëìë¤.
    * íì´ë¼ì´íë  ë¬¸ìì´ì ë³´ì¬ì£¼ë í¨ìì´ë¤.
    * @return íì´ë¼ì´íë  ë¬¸ìì´
   public String getHighlightKeyword() {
       String keyWord = this.search.w3GetHighlightKeyword().trim();
       return keyWord;
   }
    */

   /**
    * ííì ë¶ìë ê²°ê³¼ ë¬¸ìì´ì ë³´ì¬ì£¼ë í¨ìì´ë¤.
    * @param colName
    * @param field
    * @return íì´ë¼ì´íë  ë¬¸ìì´
    */
   public String getHighlightKeywordByField(String colName,
           String searchField) {
       String keyWord = this.search.w3GetHighlightByField(colName,
               searchField);
       return keyWord;
   }

   /**
    *
    * @param collectionName
    * @return ê²ìê²°ê³¼ ê°ì
    */
   public int getResultCount(String collectionName) {
       return search.w3GetResultCount(collectionName);
   }

   /**
    *
    * @param collectionName
    * @return ê²ìê²°ê³¼ ì´ ê°ì
    */
   public int getResultTotalCount(String collectionName) {
       return search.w3GetResultTotalCount(collectionName);
   }


   /**
    *
    * @param collectionName
    * @param idx
    * @return ê²ìí í´ë¹ ë¬¸ìì ì¤ë³µë¬¸ì ê°ìë¥¼ ë°í
    */
   public int getDuplicateDocumentCount(String collectionName, int idx) {
       return search.w3GetDuplicateDocumentCount(collectionName, idx);
   }

   /**
    *
    * @param collectionName
    * @param groupIndex
    * @param docIndex
    * @return ê·¸ë£¹íë ë¬¸ì ì¤ ì§ì ë ììì ê·¸ë£¹ ë´ìì ê° ê²°ê³¼ë¤ì´ ì¤ë³µë ë¬¸ìì ê°ìë¥¼ ë°í
    */
   public int getDuplicateDocumentCountInGroup(String collectionName, int groupIndex,
           int docIndex) {
       return search.w3GetDuplicateDocumentCountInGroup(collectionName, groupIndex, docIndex);
   }

   /**
    * ìµê·¼ì ê²ìë í¤ìëë¦¬ì¤í¸ë¥¼ ë°ííë¤.
    * @param count
    * @return ìµê·¼ì ê²ìë í¤ìëë¦¬ì¤í¸
    */
   public String[] receiveRecentQueryListResult(int mode, int count) {
       int ret = search.w3ReceiveRecentQueryListResult(mode, count);
       if( ret < 0 ){
           systemOut("[W3ReceiveRecentQueryListResult] " + search.w3GetErrorInfo() + ", ret=" + ret);
           return null;
       }
       int size = search.w3GetRecentQueryListSize();
       String[] keyList = new String[size];
       for(int i=0; i<size; i++ ){
           keyList[i] = search.w3GetRecentQuery(i);
       }
       return keyList;
   }

   /**
    * ìµê·¼ì ê²ìë í¤ìëë¦¬ì¤í¸ë¥¼ ë°ííë¤.
    * @param count
    * @return ìµê·¼ì ê²ìë í¤ìëë¦¬ì¤í¸
    */
   public int receiveRecentQueryListResultAsXml(int mode, int count) {
       int ret = search.w3ReceiveRecentQueryListResultAsXml(mode, count);
       if( ret < 0 ){
           systemOut("[w3ReceiveRecentQueryListResultAsXml] " + search.w3GetErrorInfo() + ", ret=" + ret);
           return -1;
       }
       return ret;
   }

   /**
    * ìµê·¼ì ê²ìë í¤ìëë¦¬ì¤í¸ë¥¼ ë°ííë¤.
    * @param count
    * @return ìµê·¼ì ê²ìë í¤ìëë¦¬ì¤í¸
    */
   public int receiveRecentQueryListResultAsJson(int mode, int count) {
       int ret = search.w3ReceiveRecentQueryListResultAsJson(mode, count);
       if( ret < 0 ){
           systemOut("[w3ReceiveRecentQueryListResultAsJson] " + search.w3GetErrorInfo() + ", ret=" + ret);
           return -1;
       }
       return ret;
   }


   /**
   */
   public String getSuggestedQuery() {
       return search.w3GetSuggestedQuery();
   }

   /**
    * v4.x í¸í method
    * @param mode
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    * @deprecated  As of v4.x, replaced by
    * {@link #receiveSearchQueryResult(int)}
    */
   public int recvResult(int mode) {
       int ret = search.w3ReceiveSearchQueryResult(mode);
       return ret;
   }

   /**
   *
   */
   public int recvDuplicateDocumentsResult(int mode) {
       int ret = search.w3ReceiveDuplicateDocumentsResult(mode);
       return ret;
   }

   /**
   *
   */
   public int recvDuplicateDocumentsResultAsJson(int mode) {
       int ret = search.w3ReceiveDuplicateDocumentsResultAsJson(mode);
       return ret;
   }

   /**
   *
   */
   public int recvDuplicateDocumentsResultAsXml(int mode) {
       int ret = search.w3ReceiveDuplicateDocumentsResultAsXml(mode);
       return ret;
   }


   /**
    *
    * @param mode
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int receiveSearchQueryResult(int mode) {
       int ret = search.w3ReceiveSearchQueryResult(mode);
       return ret;
   }

   /**
    *
    * @param mode
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int receiveSearchQueryResultAsXml(int mode) {
       int ret = search.w3ReceiveSearchQueryResultAsXml(mode);
       return ret;
   }


   /**
    *
    * @param mode
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int receiveSearchQueryResultAsJson(int mode) {
       int ret = search.w3ReceiveSearchQueryResultAsJson(mode);
       return ret;
   }

   /**
    *
    * @return ì±ê³µì´ë©´ ê²ìê²°ê³¼ë¥¼ XMLë¡ ë°ííë¤.
    */
   public String getResultXml() {
       String ret = search.w3GetResultXml();
       return ret;
   }

   /**
    *
    * @return ì±ê³µì´ë©´ ê²ìê²°ê³¼ë¥¼ JSON dataë¡ ë°ííë¤.
    */
   public String getResultJson() {
       String ret = search.w3GetResultJson();
       return ret;
   }

   /**
    * UID ê²ìì ê²ìê¸°ì ì ë¬íê³ , ê²°ê³¼ë¥¼ ë°ë í¨ìì´ë¤.
    * v4.x í¸í method
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    * @deprecated  As of v4.x, replaced by
    * {@link #receiveUidResult(int)}
    */
   public int recvDocument(int mode) {
       int ret = search.w3ReceiveUidResult(mode);
       return ret;
   }

   /**
    * UID ê²ìì ê²ìê¸°ì ì ë¬íê³ , ê²°ê³¼ë¥¼ ë°ë í¨ìì´ë¤.
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int receiveUidResult(int mode) {
       int ret = search.w3ReceiveUidResult(mode);
       return ret;
   }

   /**
    * UID ê²ìì ê²ìê¸°ì ì ë¬íê³ , ê²°ê³¼ë¥¼ ë°ë í¨ìì´ë¤.
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int receiveUidResultAsXml(int mode) {
       int ret = search.w3ReceiveUidResultAsXml(mode);
       return ret;
   }

   /**
    * UID ê²ìì ê²ìê¸°ì ì ë¬íê³ , ê²°ê³¼ë¥¼ ë°ë í¨ìì´ë¤.
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int receiveUidResultAsJson(int mode) {
       int ret = search.w3ReceiveUidResultAsJson(mode);
       return ret;
   }

   /**
    * v4.x í¸í method
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    * @deprecated  As of v4.x, replaced by
    * {@link #receiveMorphemeAnalysisResult(int)}
    */
   public int recvAnalyzedQuery(int mode) {
       int ret = search.w3ReceiveMorphemeAnalysisResult(mode);
       return ret;
   }

   /**
    *
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int receiveMorphemeAnalysisResult(int mode) {
       int ret = search.w3ReceiveMorphemeAnalysisResult(mode);
       return ret;
   }

   /**
    *
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int receiveMorphemeAnalysisResultAsXml(int mode) {
       int ret = search.w3ReceiveMorphemeAnalysisResultAsXml(mode);
       return ret;
   }

   /**
    *
    * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
    */
   public int receiveMorphemeAnalysisResultAsJson(int mode) {
       int ret = search.w3ReceiveMorphemeAnalysisResultAsJson(mode);
       return ret;
   }


   /**
    * ì£¼ì´ì§ collection ê²°ê³¼ ìì index ë²ì§¸ ë¬¸ìì Collection IDë¥¼ ë°ííë¤.
    * @param coll
    * @param idx
    * @return FIELD VALUE
    */
   public String getCollectionId(String coll, int idx) {
       return search.w3GetCollectionId(coll, idx);
   }

   /**
    *
    * @param coll
    * @param field
    * @param idx
    * @return FIELD VALUE
    */
   public String getField(String coll, String field, int idx) {
       return search.w3GetField(coll, field, idx);
   }

   /**
    *
    * @param coll
    * @param idx
    * @return DATE
    */
   public String getDate(String coll, int idx) {
       return search.w3GetDate(coll, idx);
   }

   /**
    *
    * @param coll
    * @param idx
    * @return DATE
    */
   public long getWeight(String coll, int idx) {
       return search.w3GetWeight(coll, idx);
   }

   /**
    *
    * @param coll
    * @param idx
    * @return RANK
    */
   public long getRank(String coll, int idx) {
       return search.w3GetRank(coll, idx);
   }

   /**
    *
    * @param coll
    * @param idx
    * @return UID
    */
   public long getUid(String coll, int idx) {
       return search.w3GetUid(coll, idx);
   }

   /**
    *
    * @param coll
    * @param idx
    * @return SearcherId
    */
   public String getSearcherId(String coll, int idx) {
       return search.w3GetSearcherId(coll, idx);
   }

   /*
     * ì¬ë¬ ì»¬ë ìì ê²ìê²°ê³¼ë¥¼ íëì ê°ì ì»¬ë ì(Merge Collection) ê²°ê³¼ë¡ íµí©íì¬ ê°ì ¸ì¤ê¸° ìí  ë ì¬ì©íë í¨ì
     * @param mergeCollection íµí© ê°ì ì»¬ë ìëª
     * @param collections[] (íµí©ëì) ì»¬ë ìëª
     * @param start (ê²°ê³¼ ì¤) ìì ë¬¸ì ì¸ë±ì¤
     * @param count (ê²°ê³¼ ì¤) ê°ì ¸ì¬ ë¬¸ì ê°ì
     * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
     */
   public int addMergeCollectionInfo(String mergeCollection, String[] collections, int start, int count ){
       int collectionLen = collections.length;
       int ret = 0;

       for(int i=0; i < collectionLen; i++) {

           ret = search.w3AddMergeCollection(mergeCollection, collections[i]);
       }

       ret = search.w3SetMergePageInfo(mergeCollection, start, count);

       return ret;
   }

   /*
     * íµí© ì»¬ë ì(Merge Collection)ì ê²°ê³¼ íë(Document Field)ì íµí©ë  ê°ë³ ì»¬ë ìì ê²°ê³¼ íëë¥¼ 1:N ( 0 < N < 64 ) ê´ê³ë¡ ì°ê²°ìí¨ë¤
     * @param mergeCollection íµí© ê°ì ì»¬ë ìëª
     * @param mergeFields[] ê°ì íµí© ì»¬ë ìì ê²°ê³¼ íëëª
     * @param collections[] (íµí©ëì) ì»¬ë ìëª
     * @param fields[,] (íµí©ëì) ì»¬ë ìì ê²°ê³¼ íëëª
     * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
     */
   public int addMergeDocumentField(String mergeCollection, String[] mergeFields, String[] collections, String[][] fields) {
       int ret = 0;
       int collectionLen = collections.length;
       int fieldsLen = mergeFields.length;

       for(int i=0; i < collectionLen; i++) {

           for(int j=0; j<fieldsLen; j++) {
               ret = search.w3AddMergeDocumentField(mergeCollection, mergeFields[j], collections[i], fields[i][j]);
           }
       }
       return ret;
   }

     /*
      * w3AddMergeDocumentField í¨ìê° íµí© ì»¬ë ìì ê²°ê³¼ íëë¥¼ ì ì íìë¤ë©´, ì´ í¨ìë íµí© ì»¬ë ìì
      * MultiGroupBy íëëªì ì ì ë° ê°ë³ ì»¬ë ìì MultiGroupBy íëëªê³¼ ì°ê²°ìí¤ë ì­í 
      * @param mergeCollection íµí© ê°ì ì»¬ë ìëª
      * @param mergeFields[] ê°ì íµí© ì»¬ë ìì ê²°ê³¼ íëëª
      * @param collections[] (íµí©ëì) ì»¬ë ìëª
      * @param fields[,] (íµí©ëì) ì»¬ë ìì ê²°ê³¼ íëëª
      * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
      */
   public int addMergeMultiGroupByField(String mergeCollection, String[] mergeFields, String[] collections, String[][] fields) {
       int ret = 0;
       int collectionLen = collections.length;
       int fieldsLen = mergeFields.length;
       for(int i=0; i < collectionLen; i++) {
           for(int j=0; j<fieldsLen; j++) {
               ret = search.w3AddMergeMultiGroupByField(mergeCollection, mergeFields[j], collections[i], fields[i][j]);
           }
       }
       return ret;
   }

   /*
     * íµí© ì»¬ë ìì CategoryGroupBy íëëªì ì ì ë° ê°ë³ ì»¬ë ìì
     * CategoryGroupBy íëëªê³¼ ì°ê²°ìí¤ë ì­í 
     * @param mergeCollection íµí© ê°ì ì»¬ë ìëª
     * @param mergeFields[] ê°ì íµí© ì»¬ë ìì ê²°ê³¼ íëëª
     * @param collections[] (íµí©ëì) ì»¬ë ìëª
     * @param fields[,] (íµí©ëì) ì»¬ë ìì ê²°ê³¼ íëëª
     * @return ì±ê³µì´ë©´ 0ì ë°ííë¤. ì¤í¨ë©´ 0ì´ ìë ê°ì ë°ííë¤.
     */
   public int addMergeCategoryGroupByField(String mergeCollection, String[] mergeFields, String[] collections, String[][] fields) {
       int ret = 0;
       int collectionLen = collections.length;
       int fieldsLen = mergeFields.length;
       for(int i=0; i < collectionLen; i++) {
           for(int j=0; j<fieldsLen; j++) {
               ret = search.w3AddMergeCategoryGroupByField(mergeCollection, mergeFields[j], collections[i], fields[i][j]);
           }
       }
       return ret;
   }

   /*
     * ê²ìê¸°ìì ë°ìì¬ íµí© ì»¬ë ì(Merge Collection) ê²°ê³¼ì ìì ì¸ë±ì¤ì ë¬¸ì ê°ìë¥¼ ì¤ì 
     * CategoryGroupBy íëëªê³¼ ì°ê²°ìí¤ë ì­í 
     * @param mergeCollection íµí© ê°ì ì»¬ë ìëª
     * @param collections (íµí©ëì) ì»¬ë ìëª
     *
     * @return ë¬¸ì ê°ì ë°ííë¤.
     */
   public int getResultTotalCountInMerge(String mergeCollection, String collection){
       return search.w3GetResultTotalCountInMerge(mergeCollection, collection);
   }

   /**
    * ë¤í¸ìí¬ ì¢ë£
    */
   public void closeServer() {
       if (search != null) {
           search.w3CloseServer();
           search = null;
       }
   }

   /**
    * ì¸ìë¡ ì ë¬ë°ì collectionì ê²ìê²°ê³¼ì ìë¬ê° ë°ìíë©´ ìë¬ ì½ëì ë©ìì§ë¥¼ ë°ííë¤.
    * @param collectionName
    * @return
    */
   public String getCollectionErrorInfo(String collectionName) {
       String errorMsg = "";
       int errorCode = search.w3GetCollectionError(collectionName);
       if (errorCode != 0) {
           errorMsg = search.w3GetCollectionErrorInfo(collectionName);
           errorMsg = errorMsg + "(<b>code:<font color='red'>" + errorCode
                   + "</font></b>)";
       }
       return errorMsg;
   }



   /**
    * ê²ìê²°ê³¼ì ìë¬ê° ë°ìíë©´ ìë¬ ì½ëì ë©ìì§ë¥¼ ë°ííë¤.
    * @return
    */
   public String getErrorInfo() {
       String errorMsg = "";
       int errorCode = search.w3GetError();
       if (errorCode != 0) {
           errorMsg = search.w3GetErrorInfo();
           errorMsg = errorMsg + "(<b>code:<font color='red'>" + errorCode
                   + "</font></b>)";
       }
       return errorMsg;
   }

   /**
    * ê²ì apiì ë²ì ì ë³´ë¥¼ ë°ííë¤.
    * @return
    */
   public String getVersionInfo() {
       return search.w3GetVersionInfo();
   }



   /**
    * ìë¬ ì½ëì ëí ìë¬ì ë³´ë¥¼ web applicationì standard out logì ì¶ë ¥íë¤.
    * @param msg
    */
   public void systemOut(String msg) {
       if (out != null && isDebug) {
           try {
               out.println(msg + "<br>");
           } catch (IOException e) {
               e.printStackTrace();
           }
       }
   }
}


	/**
	 *  file: WNSearch.jsp
	 *  subject: 검색페이지에서 사용되는 메소드를 정의한 클래스
	 *  ------------------------------------------------------------------------
	 *  @original author: WISEnut
	 *  @edit author: WISEnut
	 *  @update date 2012.04.24
	 *  ------------------------------------------------------------------------
	 */
	 
	final static int CONNECTION_TIMEOUT = 20000;
	final static String CHARSET = "UTF-8";
	final static int REALTIME_COUNT=100;
	final static int PAGE_SCALE = 10; //view page list count

	final static int CONNECTION_KEEP = 0; //recevive mode
	final static int CONNECTION_REUSE = 2;
	final static int CONNECTION_CLOSE = 3;

	final static int ASC = 0; //order
	final static int DESC = 1; //order

	final static int USE_KMA_OFFOFF = 0; //synonym, morpheme
	final static int USE_KMA_ONON = 1;
	final static int USE_KMA_ONOFF = 2;
	
	final static int USE_RESULT_STRING = 0; //result data type	
	final static int USE_RESULT_XML = 1;
	final static int USE_RESULT_JSON = 2;
	final static int USE_RESULT_DUPLICATE_STRING = 3; //uid result data type	
	final static int USE_RESULT_DUPLICATE_XML = 4;
	final static int USE_RESULT_DUPLICATE_JSON = 5;

	final static int IS_CASE_ON = 1; //case on, off
	final static int IS_CASE_OFF = 0;

	final static int HI_SUM_OFFOFF = 0; //summarizing, highlighting
	final static int HI_SUM_OFFON = 1;
	final static int HI_SUM_ONOFF = 2;
	final static int HI_SUM_ONON = 3;
			
	final static int COMMON_OR_WHEN_NORESULT_OFF = 0;
	final static int COMMON_OR_WHEN_NORESULT_ON = 1;

	final static int INDEX_NAME = 0;
	final static int COLLECTION_NAME = 1;
	final static int PAGE_INFO = 2;
	final static int ANALYZER = 3;
	final static int SORT_FIELD = 4;
	final static int RANKING_OPTION = 5;
	final static int SEARCH_FIELD = 6;
	final static int RESULT_FIELD = 7;
	final static int DATE_RANGE = 8;
	final static int RANK_RANGE = 9;
	final static int EXQUERY_FIELD = 10;
	final static int COLLECTION_QUERY =11;
	final static int BOOST_QUERY =12;
	final static int FILTER_OPERATION = 13;
	final static int GROUP_BY = 14;
	final static int GROUP_SORT_FIELD = 15;
	final static int CATEGORY_BOOST = 16;
	final static int CATEGORY_GROUPBY = 17;
	final static int CATEGORY_QUERY = 18;
	final static int PROPERTY_GROUP = 19;
	final static int PREFIX_FIELD = 20;
	final static int FAST_ACCESS = 21;
	final static int MULTI_GROUP_BY = 22;
	final static int AUTH_QUERY = 23;
	final static int DEDUP_SORT_FIELD = 24;
	final static int COLLECTION_KOR = 25;	
	
	final static int MERGE_COLLECTION_NAME = 0;
	final static int MERGE_MAPPING_COLLECTION_NAME = 1;
	final static int MERGE_PAGE_INFO = 2;
	final static int MERGE_RESULT_FIELD = 3;
	final static int MERGE_MAPPING_RESULT_FIELD = 4;
	final static int MERGE_MULTI_GROUP_BY_FIELD = 5;
	final static int MERGE_MAPPING_MULTI_GROUP_BY_FIELD = 6;
	final static int MERGE_CATEGORY_GROUPBY_FIELD = 7;
	final static int MERGE_MAPPING_CATEGORY_GROUPBY_FIELD = 8;
	 
	public class WNSearch {
		private WNCommon common ;
		private WNCollection wncol;
		private String[] collections ;
		private String[] mergeCollections ;
		private String[] searchFields;
		private String managerURL = "";
		private int hiSum = 0;
		private int connectionOpt = 0;
		private StringBuffer sb = null;
		private StringBuffer warningMsg = null;

		private String searcherId = "";
		private boolean isDebug = false;
		private boolean isUidSrch = false;
		private int resultType = 0;
		
		public String realTimeKeywords= "";
		public String suggestedQuery = "";
		/**
		 * WNCommon객체를 생성하고 검색 대상 컬렉션과 검색 대상 필드들을 설정한다.
		 * @param searcherId 검색 대상 sc id
		 * @param isDebug 검색설정을 화면에 출력할 것인지 여부를 결정
		 * @param isUidSrch 키워드 검색을 할 것인지 UID 검색을 할 것인지 여부를 결정
		 * @param collections 검색하고자 하는 컬렉션들을 Array로 지정한다.
		 * @param searchFields 검색하고자 하는 검색필드들을 Array로 지정한다.
		 */
		public WNSearch(String searcherId, boolean isDebug, boolean isUidSrch, 
				String[] collections, String[] searchFields){
		    this.common = new WNCommon();
		    this.wncol = new WNCollection();
		    this.collections = collections;
		    this.searchFields = searchFields;
		    this.sb = new StringBuffer();
		    this.warningMsg = new StringBuffer();
		    this.isDebug = isDebug;
		    this.isUidSrch = isUidSrch;
		    this.searcherId = searcherId;
		}
		
		/**
		 * WNCommon객체를 생성하고 검색 대상 컬렉션과 검색 대상 필드들을 설정한다.
		 * @param searcherId 검색 대상 sc id
		 * @param isDebug 검색설정을 화면에 출력할 것인지 여부를 결정
		 * @param isUidSrch 키워드 검색을 할 것인지 UID 검색을 할 것인지 여부를 결정
		 * @param collections 검색하고자 하는 컬렉션들을 Array로 지정한다.
		 * @param searchFields 검색하고자 하는 검색필드들을 Array로 지정한다.
		 * @param resultType 검색결과를 반환받고자 하는 데이터 형태
		 */
		public WNSearch(String searcherId, boolean isDebug, boolean isUidSrch, 
				String[] collections, String[] searchFields, int resultType){
		    this.common = new WNCommon();
		    this.wncol = new WNCollection();
		    this.collections = collections;
		    this.searchFields = searchFields;
		    this.sb = new StringBuffer();
		    this.warningMsg = new StringBuffer();
		    this.isDebug = isDebug;
		    this.isUidSrch = isUidSrch;
		    this.searcherId = searcherId;
		    this.resultType = resultType;
		}
		
		/**
		 * WNCommon객체를 생성하고 검색 대상 컬렉션과 검색 대상 필드들을 설정한다.
		 * @param searcherId 검색 대상 sc id
		 * @param isDebug 검색설정을 화면에 출력할 것인지 여부를 결정
		 * @param isUidSrch 키워드 검색을 할 것인지 UID 검색을 할 것인지 여부를 결정
		 * @param collections 검색하고자 하는 컬렉션들을 Array로 지정한다.
		 * @param mergeCollections 검색하고자 하는 가상통합컬렉션을 Array로 지정한다.
		 * @param searchFields 검색하고자 하는 검색필드들을 Array로 지정한다.
		 * @param resultType 검색결과를 반환받고자 하는 데이터 형태
		 */
		public WNSearch(String searcherId, boolean isDebug, boolean isUidSrch, 
				String[] collections, String[] mergeCollections, String[] searchFields, int resultType){
		    this.common = new WNCommon();
		    this.wncol = new WNCollection();
		    this.collections = collections;
		    this.mergeCollections = mergeCollections;
		    this.searchFields = searchFields;
		    this.sb = new StringBuffer();
		    this.warningMsg = new StringBuffer();
		    this.isDebug = isDebug;
		    this.isUidSrch = isUidSrch;
		    this.searcherId = searcherId;
		    this.resultType = resultType;
		}

		/**
		 * WNCommon객체를 생성하고 검색 대상 컬렉션과 검색 대상 필드들을 설정한다.
		 * @param isDebug 검색설정을 화면에 출력할 것인지 여부를 결정
		 * @param isUidSrch 키워드 검색을 할 것인지 UID 검색을 할 것인지 여부를 결정
		 * @param collections 검색하고자 하는 컬렉션들을 Array로 지정한다.
		 * @param searchFields 검색하고자 하는 검색필드들을 Array로 지정한다.
		 * @param resultType 검색결과를 반환받고자 하는 데이터 형태
		 */
		public WNSearch(boolean isDebug, boolean isUidSrch, String[] collections, 
				String[] searchFields, int resultType){
		    this.common = new WNCommon();
		    this.wncol = new WNCollection();
		    this.collections = collections;
		    this.searchFields = searchFields;
		    this.sb = new StringBuffer();
		    this.warningMsg = new StringBuffer();
		    this.isDebug = isDebug;
		    this.isUidSrch = isUidSrch;
		    this.resultType = resultType;
		}
		
		/**
		 * WNCommon객체를 생성하고 검색 대상 컬렉션과 검색 대상 필드들을 설정한다.
		 * @param isDebug 검색설정을 화면에 출력할 것인지 여부를 결정
		 * @param isUidSrch 키워드 검색을 할 것인지 UID 검색을 할 것인지 여부를 결정
		 * @param collections 검색하고자 하는 컬렉션들을 Array로 지정한다.
		 * @param mergeCollections 검색하고자 하는 가상통합컬렉션을 Array로 지정한다.
		 * @param searchFields 검색하고자 하는 검색필드들을 Array로 지정한다.
		 * @param resultType 검색결과를 반환받고자 하는 데이터 형태
		 */
		public WNSearch(boolean isDebug, boolean isUidSrch, String[] collections, 
				String[] mergeCollections, String[] searchFields, int resultType){
		    this.common = new WNCommon();
		    this.wncol = new WNCollection();
		    this.collections = collections;
		    this.mergeCollections = mergeCollections;
		    this.searchFields = searchFields;
		    this.sb = new StringBuffer();
		    this.warningMsg = new StringBuffer();
		    this.isDebug = isDebug;
		    this.isUidSrch = isUidSrch;
		    this.resultType = resultType;
		}
		
		
		/**
		 * WNCommon객체를 생성하고 검색 대상 컬렉션과 검색 대상 필드들을 설정한다.
		 * @param isDebug 검색설정을 화면에 출력할 것인지 여부를 결정
		 * @param isUidSrch 키워드 검색을 할 것인지 UID 검색을 할 것인지 여부를 결정
		 * @param collections 검색하고자 하는 컬렉션들을 Array로 지정한다.
		 * @param searchFields 검색하고자 하는 검색필드들을 Array로 지정한다.
		 */
		public WNSearch(boolean isDebug, boolean isUidSrch, String[] collections, String[] searchFields){
		    this.common = new WNCommon();
		    this.wncol = new WNCollection();
		    this.collections = collections;
		    this.searchFields = searchFields;
		    this.sb = new StringBuffer();
		    this.warningMsg = new StringBuffer();
		    this.isDebug = isDebug;
		    this.isUidSrch = isUidSrch;
		}
		
		/**
		 * WNCommon객체를 생성하고 검색 대상 컬렉션과 검색 대상 필드들을 설정한다.
		 * @param isDebug 검색설정을 화면에 출력할 것인지 여부를 결정
		 * @param isUidSrch 키워드 검색을 할 것인지 UID 검색을 할 것인지 여부를 결정
		 * @param collections 검색하고자 하는 컬렉션들을 Array로 지정한다.
		 * @param mergeCollections 검색하고자 하는 가상통합컬렉션을 Array로 지정한다.
		 * @param searchFields 검색하고자 하는 검색필드들을 Array로 지정한다.
		 */
		public WNSearch(boolean isDebug, boolean isUidSrch, String[] collections, 
				String[] mergeCollections, String[] searchFields){
		    this.common = new WNCommon();
		    this.wncol = new WNCollection();
		    this.collections = collections;
		    this.mergeCollections = mergeCollections;
		    this.searchFields = searchFields;
		    this.sb = new StringBuffer();
		    this.warningMsg = new StringBuffer();
		    this.isDebug = isDebug;
		    this.isUidSrch = isUidSrch;
		}
	
		/**
		 * 검색 키워드를 설정한다.
		 * @param query 검색 키워드
		 * @param isRealQuery 실시간 검색어를 출력한 것인지 여부를 결정
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int search(String query, boolean isRealQuery) {
		    return search(query, isRealQuery, null, HI_SUM_ONON, COMMON_OR_WHEN_NORESULT_OFF, CONNECTION_CLOSE, false);
		}
		
		
		/**
		 * 검색 키워드를 설정한다.
		 * @param query 검색 키워드
		 * @param isRealQuery 실시간 검색어를 출력한 것인지 여부를 결정
		 * @param useOrResult 검색결과 없을 때 OR로 검색할지 여부를 결정
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int search(String query, boolean isRealQuery, int useOrResult) {
		    return search(query, isRealQuery, null, HI_SUM_ONON, useOrResult, CONNECTION_CLOSE, false);
		}
		
		/**
		 * 검색 키워드를 설정한다.
		 * @param query 검색 키워드
		 * @param isRealQuery 실시간 검색어를 출력한 것인지 여부를 결정
         * @param connectionOpt 검색기와 연결을 유지할 것인지 끊을 것인지 여부를 결정
         * @param useSuggestedQuery speller 결과를 사용할 것인지 여부를 결정
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int search(String query, boolean isRealQuery, int connectionOpt, boolean useSuggestedQuery) {
		    this.connectionOpt = connectionOpt;
		    return search(query, isRealQuery, null, HI_SUM_ONON, COMMON_OR_WHEN_NORESULT_OFF, connectionOpt, useSuggestedQuery);
		}
		
		
		/**
		 * 검색 키워드를 설정한다.
		 * @param query 검색 키워드
		 * @param isRealQuery 실시간 검색어를 출력한 것인지 여부를 결정
		 * @param useOrResult 검색결과 없을 때 OR로 검색할지 여부를 결정
         * @param connectionOpt 검색기와 연결을 유지할 것인지 끊을 것인지 여부를 결정
         * @param useSuggestedQuery speller 결과를 사용할 것인지 여부를 결정
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int search(String query, boolean isRealQuery, int useOrResult, int connectionOpt, boolean useSuggestedQuery) {
		    this.connectionOpt = connectionOpt;
		    return search(query, isRealQuery, null, HI_SUM_ONON, useOrResult, connectionOpt, useSuggestedQuery);
		}
		
		/**
		 * 검색 키워드를 설정한다.
		 * @param query 검색 키워드
		 * @param isRealQuery 실시간 검색어를 출력한 것인지 여부를 결정
		 * @param useOrResult 검색결과 없을 때 OR로 검색할지 여부를 결정
         * @param connectionOpt 검색기와 연결을 유지할 것인지 끊을 것인지 여부를 결정
         * @param hisum 하이라이팅과 요약을 사용할 옵션을 결정
         * @param useSuggestedQuery speller 결과를 사용할 것인지 여부를 결정
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int search(String query, boolean isRealQuery, int useOrResult, int connectionOpt, int hiSum, boolean useSuggestedQuery) {
		    this.connectionOpt = connectionOpt;
		    return search(query, isRealQuery, null, hiSum, useOrResult, connectionOpt, useSuggestedQuery);
		}

        /**
		 * 검색 키워드를 설정한다.
		 * @param query 검색 키워드
		 * @param isRealQuery 실시간 검색어를 출력한 것인지 여부를 결정
         * @param userInfo 사용자 정보를 QueryLog파일이 저장할 때 사용된다
         * @param hisum 하이라이팅과 요약을 사용할 옵션을 결정
         * @param useOrResult 검색결과 없을 때 OR로 검색할지 여부를 결정
         * @param connectionOpt 검색기와 연결을 유지할 것인지 끊을 것인지 여부를 결정
         * @param useSuggestedQuery speller 결과를 사용할 것인지 여부를 결정
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		private int search(String query, boolean isRealQuery, String[] userInfo, int hiSum, int useOrResult, int connectionOpt, boolean useSuggestedQuery) {
			this.connectionOpt = connectionOpt;
		  	this.hiSum = hiSum;
		  	int ret = 0;
		  	if(!isUidSrch) {
		        ret = common.setCommonQuery(query, CHARSET, useOrResult, useSuggestedQuery, userInfo);
		    } else {
		        ret = common.setUidQuery(CHARSET);
		    }

			if( collections != null){
				for(int i=0; i<collections.length; i++) {
					//컬렉션 index 설정
					int idx = getCollIdx(collections[i]);
					//컬렉션 index 결과 비교
					if(idx < 0){
						appendWarnings("[WARNING] [w3AddCollection] [search] ["+collections[i]+"] Collection name is not exist");
						break;
					}
					
					//검색 컬렉션 설정
					ret = setCollectionBasicInfo(idx);
					
					//검색 필드 설정
					if(!isUidSrch) {
						ret = setSearchFieldInfo(idx);
						//날짜 범위 검색
						ret = setDateRange(idx);
						//Rank 범위 검색
                        ret = setRankRange(idx);
						//PrefixQuery 조건 검색
						ret = setPrefixQuery(idx);
						//CollectionQuery 검색
						ret = setCollectionQuery(idx);
						//카테고리 부스팅 적용
						ret = setBoostCategory(idx);
						//카테고리 그룹바이
						ret = addCategoryGroupBy(idx);
						//카테고리 검색
						ret = addCategoryQuery(idx);
						//FilterQuery 조건 검색
						ret = setFilterQuery(idx);
						//권한 검색 조건 
						ret = setAuthorityQuery(idx);
						//속성 그룹 검색 조건 
						ret = setPropertyGroup(idx);
						//그룹바이 조건검색
						ret = setGroupBy(idx);
						//멀티그룹바이 조건검색
						ret = setMultiGroupBy(idx);
                        // DEDUP 조건검색
                        ret = setDuplicateDetectionCriterionField(idx);
					}else {
						//UID검색						
						ret = setUid(idx, query, searcherId);
					}
					//결과 필드 설정
					ret = setResultFieldInfo(idx);
				}
				
				
			}else{
				  appendWarnings("[WARNING] [w3AddCollection] [search] [ ] CollectionName is null.");
			}
			
			if(mergeCollections != null) {
				for(int n=0; n < mergeCollections.length; n++) {
					int idx = getMergeCollIdx(mergeCollections[n]);
					//컬렉션 index 결과 비교
					if(idx < 0){
						appendWarnings("[WARNING] [w3AddMergeCollection] [search] ["+mergeCollections[n]+"] Merge Collection name is not exist");
						break;
					}
					//가상 collection 설정
					ret = setMergeCollectionBasicnfo(idx);
					//가상 collection document field
					ret = addMergeDocumentField(idx);	
					//가상 collection multi-group by
					ret = addMergeMultiGroupBy(idx);	
					//가상 collection category group by
					ret = addMergeCategoryGroupByField(idx);	
				}
			}
			
			//Connection
			ret = common.getConnection(SEARCH_IP, SEARCH_PORT, CONNECTION_TIMEOUT);
			
			//실시간 검색키워드를 요청
			if(isRealQuery && !query.equals("")) {
				this.realTimeKeywords = recvRealTimeSearchKeywordList(REALTIME_COUNT);
			}			
			
			//검색결과를 얻는다.
			if(!isUidSrch) {
				if(resultType == USE_RESULT_XML) {
					ret = common.receiveSearchQueryResultAsXml(this.connectionOpt);
				}else if(resultType == USE_RESULT_JSON) {
					ret = common.receiveSearchQueryResultAsJson(this.connectionOpt);
				}else {
					ret = common.receiveSearchQueryResult(this.connectionOpt);
				}
			}else {
				if(resultType == USE_RESULT_XML) {
					ret = common.receiveUidResultAsXml(this.connectionOpt);
				} else if(resultType == USE_RESULT_JSON) {
					ret = common.receiveUidResultAsJson(this.connectionOpt);
				} else if(resultType == USE_RESULT_DUPLICATE_STRING) {
					ret = common.recvDuplicateDocumentsResult(this.connectionOpt);
				} else if(resultType == USE_RESULT_DUPLICATE_XML) {
					ret = common.recvDuplicateDocumentsResultAsXml(this.connectionOpt);
				} else if(resultType == USE_RESULT_DUPLICATE_JSON) {
					ret = common.recvDuplicateDocumentsResultAsJson(this.connectionOpt);
				} else {
					ret = common.receiveUidResult(this.connectionOpt);
				}			    
			}		
			
			//디버그 모드일 경우
			if(isDebug) {
				//디버그 정보
				debugMsg(isRealQuery, query);
				//에러 정보
				String errMsg = common.getErrorInfo();
				appendErrors(errMsg);
			}
			
			//오타후 정타 추천 키워드 요청
			if(useSuggestedQuery){
				this.suggestedQuery = common.getSuggestedQuery();
			}
			
			return ret;
		}
		
		
		
		/**
		 * 기본 검색 정보를 설정한다. 언어분석, 페이지 설정, 정렬이 해당된다.
		 * @param idx 검색하고자 하는 컬렉션의 index
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int setCollectionBasicInfo(int idx) {
			int ret = 0;
			String[] analyzer = split(wncol.COLLECTION_INFO[idx][ANALYZER], ",");
			String[] pageInfo = split(wncol.COLLECTION_INFO[idx][PAGE_INFO], ",");
			String[] rankingOption = split(wncol.COLLECTION_INFO[idx][RANKING_OPTION], ",");
			String sortFieldInfo = wncol.COLLECTION_INFO[idx][SORT_FIELD];
			if(analyzer.length < 5 || pageInfo.length < 2 
					|| rankingOption.length < 3) {
				appendWarnings("[WARNING] [setCollectionBasicInfo] ["+ COLLECTIONS[idx] 
						+ "] Analyzer : '" + wncol.COLLECTION_INFO[idx][ANALYZER] 
						+ "', PageInfo : '" + wncol.COLLECTION_INFO[idx][PAGE_INFO] 
						+ "', RankingOption : '"+ wncol.COLLECTION_INFO[idx][RANKING_OPTION] 	
						+ "' error");
				return -1;
			}
			
			int useKma=Integer.parseInt(analyzer[0]);
			int isCase=Integer.parseInt(analyzer[1]);
			int useOriginal = Integer.parseInt(analyzer[2]);
			int useSynonym = Integer.parseInt(analyzer[3]);
			int useDuplicateDetection = Integer.parseInt(analyzer[4]);
			
			if(checkKeywordAnalyzer(COLLECTIONS[idx], useKma, isCase, useOriginal, useSynonym, useDuplicateDetection)== -1) {
				return -1;
			}
			
			ret = addCollection(idx, useKma, isCase, useOriginal, useSynonym, useDuplicateDetection);

			if(checkSetPageInfo(COLLECTIONS[idx], this.hiSum, Integer.parseInt(pageInfo[0]), Integer.parseInt(pageInfo[1])) == -1 ) {
				return -1;
			}
			ret = common.setPageInfo(COLLECTIONS[idx], this.hiSum,
			        Integer.parseInt(pageInfo[0]), Integer.parseInt(pageInfo[1]));
				
		    ret = common.setRanking(COLLECTIONS[idx], rankingOption[0], rankingOption[1],  parseInt(rankingOption[2], 100));
		    
            for( String sortField : sortFieldInfo.split(",") )
            {
                String[] tokens = sortField.split("/");
                if( tokens.length != 2 )
                {
                    appendWarnings("[ERROR] Sort Field format is not correct. ( FIELD/ORDER )");
                    return -1;
                }
                if( checkSortFieldName(COLLECTIONS[idx], tokens[0], tokens[1]) != 0 )
                    return -1;
            }
		    ret = common.setSortField(COLLECTIONS[idx], sortFieldInfo);
			return ret;
		}

		/**
		 *
		 * @param idx
		 * @param useKma
		 * @param isCase
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int addCollection(int idx, int useKma, int isCase, int useOriginal, int useSynonym, int useDuplicateDetection){
			int ret = 0;
			String indexName = COLLECTIONS[idx];
			String colName = wncol.COLLECTION_INFO[idx][COLLECTION_NAME];
			if(indexName.equals(colName)){
				if(useOriginal == -1 && useSynonym == -1) {
					ret = common.addCollection(indexName, useKma, isCase);
				}else{
					ret = common.addCollection(indexName, useKma, isCase, useOriginal, useSynonym, useDuplicateDetection);
				}
			}else{
				if(useOriginal == -1 && useSynonym == -1) {
					ret = common.addAliasCollection(indexName, colName, useKma, isCase);
				}else{
					ret = common.addAliasCollection(indexName, colName, useKma, isCase, useOriginal, useSynonym, useDuplicateDetection);
				}
				
			}

			return ret;
		}

		/**
		 * WNCollection의 wncol.COLLECTION_INFO에 설정이 필요한 값을 Assign한다.
		 * @param collName 검색하고자 하는 컬렉션의 이름
		 * @param target Assign 대상
		 * @param value Assign 값
		 * @return 성공이면 true, 실패하면 false를 반환한다.
		 */
		public boolean setCollectionInfoValue(String collName, int target, String value) {
			int idx = getCollIdx(collName);
			if (idx == -1){
				appendWarnings("[WARNING] [w3AddCollection] [setCollectionInfoValue] ["+collName+"] Collection name is not exist");
				return false;
			}
			wncol.COLLECTION_INFO[idx][target] = value;
			return true;
		}
		
		/**
		 * WNCollection의 wncol.COLLECTION_INFO에 설정이 필요한 값을 Assign한다.
		 * @param collName 검색하고자 하는 컬렉션의 이름
		 * @param target Assign 대상
		 * @param value Assign 값
		 * @return 성공이면 true, 실패하면 false를 반환한다.
		 */
		public boolean setMergeCollectionInfoValue(String collName, int target, String value) {
			int idx = getMergeCollIdx(collName);
			if (idx == -1){
				appendWarnings("[WARNING] [w3AddMergeCollection] [setMergeCollectionInfoValue] ["+collName+"] Collection name is not exist");
				return false;
			}
			wncol.MERGE_COLLECTION_INFO[idx][target] = value;
			return true;
		}

		/**
		 * 검색하고자 하는 컬렉션의 모든 검색 필드를 설정한다.
		 * @param idx 검색하고자 하는 컬렉션의 index
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int setSearchFieldInfo(int idx) {
			int ret = 0;//설정된 검색필드 전체조건에서 검색
			//WNCollection에 정의된 검색필드 리스트를 얻는다.
			String searchFields = wncol.COLLECTION_INFO[idx][SEARCH_FIELD];
			String[] searchFieldList = split(searchFields, ",");
			if(searchFieldList.length < 1) {
				appendWarnings("[WARNING] [w3AddSearchField] [setAllSearchFieldInfo] [" + COLLECTIONS[idx] + "] SEARCH_FIELD should be defined.");
				return -1;
			}
			int i = checkFieldName("[w3AddSearchField]", COLLECTIONS[idx], searchFieldList, SEARCH_FIELD);
			if( i != 0) {
				appendWarnings("[WARNING] [w3AddSearchField] [setAllSearchFieldInfo] [" + COLLECTIONS[idx] + "] '" + searchFieldList[i-1] + "' is not exist.");
				return -1;
			}
			ret = common.setSearchField(COLLECTIONS[idx], searchFields);
			return ret;
		}

		
		/**
		 * 컬렉션 별로 검색어 지정한다.
		 * @return  성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int setCollectionQuery(int idx) {
			int ret = 0;
			//컬렉션 검색 설정
			if (!wncol.COLLECTION_INFO[idx][COLLECTION_QUERY].equals("")) {
				if(isDebug) {
					checkCollectionQueryFieldName("[w3SetCollectionQuery] [setCollectionQuery]", COLLECTIONS[idx],wncol.COLLECTION_INFO[idx][COLLECTION_QUERY] );
				}
				ret = common.setCollectionQuery(COLLECTIONS[idx],
	                       wncol.COLLECTION_INFO[idx][COLLECTION_QUERY]);
			}
			return ret;
		}
		
		/**
		 * 특정 필드에 쿼리 및 가중치를 부여하여 검색 결과를 조정하도록 해준다.
		 * @return  성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int setBoostQuery(int idx) {
			int ret = 0;
			//Boost 검색 설정
			if (!wncol.COLLECTION_INFO[idx][BOOST_QUERY].equals("")) {
				/* if(isDebug) {
					checkCollectionQueryFieldName("[w3SetBoostQuery] [setBoostQuery]", COLLECTIONS[idx],wncol.COLLECTION_INFO[idx][COLLECTION_QUERY] );
				} */
				ret = common.setBoostQuery(COLLECTIONS[idx], wncol.COLLECTION_INFO[idx][BOOST_QUERY]);
			}
			return ret;
		}

		/**
		 * 검색하고자 하는 컬렉션의 UID 검색을 설정한다.
		 * @param idx 검색하고자 하는 컬렉션의 index
		 * @param value 검색하고자 하는 UID 값
		 * @return  성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int setUid(int idx, String value, String searcherId) {
			int ret = 0;
			
			if(!value.equals("")) {
				String[] values = split(value,",");
				ret = common.setUid(COLLECTIONS[idx], values, searcherId);
			}
			return ret;
		}

		/**
		 * 검색하고자 하는 컬렉션의 검색 날짜 범위를 설정한다.
		 * @param idx 검색하고자 하는 컬렉션의 index
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int setDateRange(int idx) {
			int ret = 0;
			//날짜검색 범위 설정
			if (!wncol.COLLECTION_INFO[idx][DATE_RANGE].equals("")) {
				String[] dateFields = split(wncol.COLLECTION_INFO[idx][DATE_RANGE], ",");
				if(dateFields.length < 2) {
					appendWarnings("[WARNING] [w3SetDateRange] [setDateRange] [" + COLLECTIONS[idx] + "] DATE_RANGE : '" + wncol.COLLECTION_INFO[idx][DATE_RANGE] + "' error.");
					return -1;
				}
				ret = common.setDateRange(COLLECTIONS[idx], dateFields[0], dateFields[1], dateFields[2]);
			}
			return ret;
		}

        /**
		 * 검색하고자 하는 컬렉션의 검색 Ranking 범위를 설정한다.
		 * @param idx 검색하고자 하는 컬렉션의 index
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int setRankRange(int idx) {
			int ret = 0;
			//날짜검색 범위 설정
			if (!wncol.COLLECTION_INFO[idx][RANK_RANGE].equals("")) {
				String[] rankFields = split(wncol.COLLECTION_INFO[idx][RANK_RANGE], ",");
				if(rankFields.length < 2) {
					appendWarnings("[WARNING] [w3SetRankRange] [setRankRange] [" + COLLECTIONS[idx] + "] RANK_RANGE : '" + wncol.COLLECTION_INFO[idx][RANK_RANGE] + "' error.");
					return -1;
				}
				int min = parseInt(rankFields[0], 0);
				int max = parseInt(rankFields[1], 100);
				ret = common.setRankRange(COLLECTIONS[idx], min, max);
			}
			return ret;
		}

		/**
		 * 검색하고자 하는 컬렉션의 기본 검색 필드 외에 특정 필드에 키워드를 별도로 설정한다.
		 * @param idx 검색하고자 하는 컬렉션의 index
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int setPrefixQuery(int idx){
			int ret = 0;
			//확장 검색 설정
			if (!wncol.COLLECTION_INFO[idx][EXQUERY_FIELD].equals("")) {
				if(isDebug) {
					checkExFieldName("[w3AddExQuery] [setExQuery]", COLLECTIONS[idx]
				                    , wncol.COLLECTION_INFO[idx][EXQUERY_FIELD]);
				}
				ret = common.setPrefixQuery(COLLECTIONS[idx],
				                wncol.COLLECTION_INFO[idx][EXQUERY_FIELD]);
			}
			return ret;
		}

		/**
		 * 카테고리 부스팅을 설정한다.
		 * @param idx 검색하고자 하는 컬렉션의 index
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int setBoostCategory(int idx){
		    int ret = 0;
		    //확장 검색 설정
		    if (!wncol.COLLECTION_INFO[idx][CATEGORY_BOOST].equals("")) {
				String[] dataFields = split(wncol.COLLECTION_INFO[idx][CATEGORY_BOOST], ",");

				if(dataFields.length == 3){
					ret = common.setBoostCategory(COLLECTIONS[idx],
							dataFields[0], dataFields[1], dataFields[2]);
				}
    		}
			return ret;
		}
		
		
		/**
		 * 검색결과 패킷에 카테고리 지정 컬렉션의 카테고리 필드에서 Depth별 Category의 리스트를 포함시킨다. 
		 * @param idx 검색하고자 하는 컬렉션의 index
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int addCategoryGroupBy(int idx){
			int ret = 0;
			
			if (!wncol.COLLECTION_INFO[idx][CATEGORY_GROUPBY].equals("")) {
				String[] categoryGroup = split(wncol.COLLECTION_INFO[idx][CATEGORY_GROUPBY], "|");

				common.addCategoryGroupBy(COLLECTIONS[idx], categoryGroup);
			}
			
			return ret;
		}
		
		/**
		 * 선택한 컬렉션 내의 선택 카테고리 필드의 값으로 검색결과를 필터링 한다. 
		 * 혹은 다른 쿼리없이 본쿼리를 실행하면 해당 카테고리의 값에 매치되는 문서를 출력한다.
		 * @param idx 검색하고자 하는 컬렉션의 index
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int addCategoryQuery(int idx){
			int ret = 0;
			
			if (!wncol.COLLECTION_INFO[idx][CATEGORY_QUERY].equals("")) {
				String[] categoryQuery = split(wncol.COLLECTION_INFO[idx][CATEGORY_QUERY], ",");
				
				ret = common.addCategoryQuery(COLLECTIONS[idx], categoryQuery);
    		}
			
			return ret;
		}
		
		public int getCategoryCount(String collectionName, String fieldName, int depth) {
			int cnt = 0;
			int chk = checkValidCollection("[w3GetCategoryCount] [getCategoryCount]", collectionName);
			if(chk == -1){
				return -1;
			}
			/*
			chk = checkValidDocumentField(collectionName, fieldName, RESULT_FIELD);
			if(chk == -1){
				appendWarnings("[WARNING] [w3GetCategoryCount] [getCategoryCount] [" + collectionName + "] RESULT_FIELD should be defined.");
				return -1;
			}
			*/
			
			return common.getCategoryCount(collectionName, fieldName, depth);
		}
		
		
		public String getCategoryName(String collectionName, String fieldName, int depth, int idx) {
			int cnt = 0;
			int chk = checkValidCollection("[w3GetCategoryName] [getCategoryName]", collectionName);
			if(chk == -1){
				return null;
			}
			/*
			chk = checkValidDocumentField(collectionName, fieldName, RESULT_FIELD);
			if(chk == -1){
				appendWarnings("[WARNING] [w3GetCategoryName] [getCategoryName] [" + collectionName + "] RESULT_FIELD should be defined.");
				return null;
			}
			*/
			return common.getCategoryName(collectionName, fieldName, depth, idx);
		}
		
		public int getDocumentCountInCategory(String collectionName, String fieldName, int depth, int idx) {
			int cnt = 0;
			int chk = checkValidCollection("[w3GetDocumentCountInCategory] [getDocumentCountInCategory]", collectionName);
			if(chk == -1){
				return -1;
			}
			/*
			chk = checkValidDocumentField(collectionName, fieldName, RESULT_FIELD);
			if(chk == -1){
				appendWarnings("[WARNING] [w3GetDocumentCountInCategory] [getDocumentCountInCategory] [" + collectionName + "] RESULT_FIELD should be defined.");
				return -1;
			}
			*/
			return common.getDocumentCountInCategory(collectionName, fieldName, depth, idx);
		}
		
		/**
		* 권한검색하고자 하는 컬렉션의 특정 필드와 조건을 설정한다.
		* @param idx 검색하고자 하는 컬렉션의 index
		* @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		*/
		public int setAuthorityQuery(int idx) {
			int ret = 0;
			//컬렉션 검색 설정
			if (!wncol.COLLECTION_INFO[idx][AUTH_QUERY].equals("")) {
				String[] dataFields = split(wncol.COLLECTION_INFO[idx][AUTH_QUERY], ",");

				if(dataFields.length == 4){
					ret = common.setAuthorityQuery(COLLECTIONS[idx],
							dataFields[0], dataFields[1], dataFields[2], dataFields[3]);
				}
				
			}
			return ret;
		}
		
		
		/**
		* 특정 필드의 값을 기준으로 범위 별로 그룹을 만들거나, 이 필드 값이 특정 범위에 속하는 레코드만 추출
		* @param idx 검색하고자 하는 컬렉션의 index
		* @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		*/
		public int setPropertyGroup(int idx) {
			int ret = 0;
			//컬렉션 검색 설정
			if (!wncol.COLLECTION_INFO[idx][PROPERTY_GROUP].equals("")) {
				String[] dataFields = split(wncol.COLLECTION_INFO[idx][PROPERTY_GROUP], ",");

				if(dataFields.length == 4){
					ret = common.setPropertyGroup(COLLECTIONS[idx],
							dataFields[0], parseInt(dataFields[1],0), 
							parseInt(dataFields[2], 1000000), parseInt(dataFields[3], 5));
				}				
			}
			return ret;
		}
		
		/**
		* 검색기로부터 받아온 속성 그룹의 개수를 반환
		* @param collectionName
		* @return 성공이면 검색결과 개수을 반환한다. 실패하거나 결과가 없을 경우 0 값을 반환한다.
		*/
		public int getCountPropertyGroup(String collectionName) {
			int cnt = 0;
			int chk = checkValidCollection("[w3GetCountPropertyGroup] [getCountPropertyGroup]", collectionName);
			if(chk == -1){
				return cnt;
			}
			return common.getCountPropertyGroup(collectionName);
		}
		
		/**
		* 전체 속성 그룹 결과에서 최소값을 반환
		* @param collectionName
		* @return 성공이면 검색결과 개수을 반환한다. 실패하거나 결과가 없을 경우 0 값을 반환한다.
		*/
		public int getMinValuePropertyGroup(String collectionName) {
			int cnt = 0;
			int chk = checkValidCollection("[w3GetMinValuePropertyGroup] [getMinValuePropertyGroup]", collectionName);
			if(chk == -1){
				return cnt;
			}
			return common.getMinValuePropertyGroup(collectionName);
		}
		
		/**
		* 전체 속성 그룹 결과에서 최대값을 반환
		* @param collectionName
		* @return 성공이면 검색결과 개수을 반환한다. 실패하거나 결과가 없을 경우 0 값을 반환한다.
		*/
		public int getMaxValuePropertyGroup(String collectionName) {
			int cnt = 0;
			int chk = checkValidCollection("[w3GetMaxValuePropertyGroup] [getMaxValuePropertyGroup]", collectionName);
			if(chk == -1){
				return cnt;
			}
			return common.getMaxValuePropertyGroup(collectionName);
		}
		
		/**
		* 지정된 속성 그룹 내 최소값을 반환
		* @param collectionName
		* @param groupIndex
		* @return 성공이면 검색결과 개수을 반환한다. 실패하거나 결과가 없을 경우 0 값을 반환한다.
		*/
		public int getMinValueInPropertyGroup(String collectionName, int groupIndex) {
			int cnt = 0;
			int chk = checkValidCollection("[w3GetMinValueInPropertyGroup] [getMinValueInPropertyGroup]", collectionName);
			if(chk == -1){
				return cnt;
			}
			return common.getMinValueInPropertyGroup(collectionName, groupIndex);
		}
		
		/**
		* 지정된 속성 그룹 내 최대값을 반환
		* @param collectionName
		* @param groupIndex
		* @return 성공이면 검색결과 개수을 반환한다. 실패하거나 결과가 없을 경우 0 값을 반환한다.
		*/
		public int getMaxValueInPropertyGroup(String collectionName, int groupIndex) {
			int cnt = 0;
			int chk = checkValidCollection("[w3GetMaxValueInPropertyGroup] [getMaxValueInPropertyGroup]", collectionName);
			if(chk == -1){
				return cnt;
			}
			return common.getMaxValueInPropertyGroup(collectionName, groupIndex);
		}
		
		
		/**
		 * 검색하고자 하는 컬렉션의 특정 필드의 값으로 필터링 한다.
		 * @param idx 검색하고자 하는 컬렉션의 index
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int setFilterQuery(int idx) {
			int ret = 0;
			if (!wncol.COLLECTION_INFO[idx][FILTER_OPERATION].equals("")) {
				if(isDebug) {
					checkFilterFieldName("[w3SetFilterQuery] [setFilterQuery]", COLLECTIONS[idx]
                    		, wncol.COLLECTION_INFO[idx][FILTER_OPERATION]);
       			}
        		ret = common.setFilterQuery(COLLECTIONS[idx], wncol.COLLECTION_INFO[idx][FILTER_OPERATION]);
			}
			return ret;
		}
		
		public int setMultiGroupBy(int idx) {			
			int ret = 0;
			if (!wncol.COLLECTION_INFO[idx][MULTI_GROUP_BY].equals("")) {
				String field = wncol.COLLECTION_INFO[idx][MULTI_GROUP_BY];
				//그룹전달인자 확인
				ret = common.setMultiGroupBy(COLLECTIONS[idx], field);
			}
			return ret;
		}
		
		/**
		 * 검색하고자 하는 컬렉션의 특정 필드의 값으로 그룹화 한고 정렬 조건이 있을 경우 정렬한다.
		 * @param idx  검색하고자 하는 컬렉션의 index
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		 public int addMultiGroupBy(int idx) {
			int ret = 0;
			if (!wncol.COLLECTION_INFO[idx][MULTI_GROUP_BY].equals("")) {
				String field = wncol.COLLECTION_INFO[idx][MULTI_GROUP_BY];
				//그룹전달인자 확인
				ret = common.addMultiGroupBy(COLLECTIONS[idx], field);
			}
			return ret;
		}
		
		/**
		*/
		public String getMultiGroupByResult(String collectionName, String fieldName) {
			int cnt = 0;
			int chk = checkValidCollection("[w3AddMultiGroupBy] [getMultiGroupByResult]", collectionName);
			if(chk == -1){
				return null;
			}
			chk = checkValidDocumentField(collectionName, fieldName, RESULT_FIELD);
			if(chk == -1){
				appendWarnings("[WARNING] [w3AddMultiGroupBy] [getMultiGroupByResult] [" + collectionName + "] RESULT_FIELD should be defined.");
				return null;
			}
			return common.getMultiGroupByResult(collectionName, fieldName);
		}
		
		/**
		 * 검색하고자 하는 컬렉션의 특정 필드의 값으로 그룹화 한고 정렬 조건이 있을 경우 정렬한다.
		 * @param idx  검색하고자 하는 컬렉션의 index
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		 public int setGroupBy(int idx) {
			int ret = 0;
			if (!wncol.COLLECTION_INFO[idx][GROUP_BY].equals("")) {
				String[] groupby = split(wncol.COLLECTION_INFO[idx][GROUP_BY], ",");
				if(isDebug) {
				// 그룹화할 필드가 fastacces로 잡혀있는지 체크
					if(checkValidField(COLLECTIONS[idx], groupby[0], FAST_ACCESS) == -1) {
						appendWarnings("[WARNING] [w3SetGroupBy] [setGroupBy] [" + COLLECTIONS[idx] + "] " +groupby[0]+ " is not fastaccess field.");
					}
				}
				//그룹전달인자 확인
				if(groupby.length == 2){
					//그룹화 설정
					ret = common.setGroupBy(COLLECTIONS[idx], groupby[0], parseInt(groupby[1], 0));
					//그룹 정렬 전달 인자 확인
					ret = addSortFieldInGroup(idx);
				}else{
					appendWarnings("[WARNING] [w3SetGroupBy] [setGroupBy] [" + COLLECTIONS[idx] + "] " +wncol.COLLECTION_INFO[idx][GROUP_BY]+ "  Check variable format and value.");
				}
			}
			return ret;
		}

		/**
		 * 그룹화 된 컬렉션의 정렬을 정한다.
		 * @param idx
		 * @return 성공이면 0 실패면 0 보다 작은 값 반환
		 */
		public int addSortFieldInGroup(int idx){
			int ret = -1;
			//그룹 정렬 전달인자 확인
			if (wncol.COLLECTION_INFO[idx][GROUP_SORT_FIELD] != ""){
				String sortValue = wncol.COLLECTION_INFO[idx][GROUP_SORT_FIELD];
				ret = common.setSortFieldInGroup(COLLECTIONS[idx], sortValue);
			}
			return ret;
		}
		
		/**
		 * 검색결과에서 중복문서 정렬 기준을 설정한다.
		 * @param collectionName
		 * @param idx
		 * @return 검색한 해당 문서의 중복문서 개수를 반환
		 */
		public int setDuplicateDetectionCriterionField(int idx){
			int ret = 0;
			if (!wncol.COLLECTION_INFO[idx][DEDUP_SORT_FIELD].equals("")){
				String sortValue = wncol.COLLECTION_INFO[idx][DEDUP_SORT_FIELD];
				ret = common.setDuplicateDetectionCriterionField(COLLECTIONS[idx], sortValue);
			}
			return ret;
		}
		
		/**
		 * 검색 결과 중 개별 문서에 대해서 중복으로 판별된 문서의 개수를 반환한다.
		 * @param collectionName
		 * @param idx
		 * @return 검색한 해당 문서의 중복문서 개수를 반환
		 */
		public int getDuplicateDocumentCount(String collectionName, int idx){
			int cnt = 0;
			int chk = checkValidCollection("[w3GetDuplicateDocumentCount] [getDuplicateDocumentCount]", collectionName);
			if(chk == -1){
				return cnt;
			}
			return common.getDuplicateDocumentCount(collectionName, idx);
		}
		
		/**
		 * 그룹화된 문서 중 지정된 순서의 그룹 내에서 각 결과들이 중복된 문서의 개수를 반환
		 * @param collectionName
		 * @param groupIndex
		 * @param idx
		 * @return 중복문서 개수를 반환
		 */
		public int getDuplicateDocumentCountInGroup(String collectionName, int groupIndex, int idx){
			int cnt = 0;
			int chk = checkValidCollection("[w3GetDuplicateDocumentCount] [getDuplicateDocumentCount]", collectionName);
			if(chk == -1){
				return cnt;
			}
			return common.getDuplicateDocumentCountInGroup(collectionName, groupIndex, idx);
		}
		
		/**
		 * 그룹화 설정된 전체 그룹 수를 가져온다.
		 * @param collectionName
		 * @return 성공이면 검색결과 개수을 반환한다. 실패하거나 결과가 없을 경우 0 값을 반환한다.
		 */
		public int  getResultTotalGroupCount(String collectionName) {
			int cnt = 0;
			int chk = checkValidCollection("[w3GetResultTotalGroupCount] [getResultTotalGroupCount]", collectionName);
			if(chk == -1){
				return cnt;
			}
			return common.getResultTotalGroupCount(collectionName);
		}

		/**
		 * 화면에 보여질 그룹화 설정된 그룹 수를 가져온다.
		 * @param collectionName
		 * @return 성공이면 검색결과 개수을 반환한다. 실패하거나 결과가 없을 경우 0 값을 반환한다.
		 */
		public int getResultGroupCount(String collectionName) {
			int cnt = 0;
			int chk = checkValidCollection("[w3GetGroupByCount] [getGroupByCount]", collectionName);
			if(chk == -1){
				return cnt;
			}
			return common.getResultGroupCount(collectionName);
		}

		
		/**
		 * 그룹에 속하는 문서중 가져온 문서 개수를 구한다.
		 * @param collectionName
		 * @param groupIndex
		 * @return 그룹에 속하는 전제문서 개수를 반환한다. 실패하거나 결과가 없을 경우 0 보다 작은값 반환한다.
		 */
		public int getTotalCountInGroup(String collectionName, int groupIndex) {
			int cnt = 0;
			int chk = checkValidCollection("[w3GetTotalCountInGroup] [getTotalCountInGroup]", collectionName);
			if(chk == -1){
				return cnt;
			}
			return common.getTotalCountInGroup(collectionName, groupIndex);
		}

		/**
		 *
		 * @param collectionName
		 * @param groupIndex
		 * @return 그룹에 속하는 문서중 가져온 문서 개수를 반환한다. 실패하거나 결과가 없을 경우 0 보다 작은값 반환한다.
		 */
		public int getCountInGroup(String collectionName, int groupIndex) {
			int cnt = 0;
			int chk = checkValidCollection("[w3GetCountInGroup] [getCountInGroup]", collectionName);
			if(chk == -1){
				return cnt;
			}
			return common.getCountInGroup(collectionName, groupIndex);
		}
		
		/**
		 * 그룹화된 문서 중 지정된 순서의 그룹 내에서 주어진 collection 결과 에서 index 번째 문서의 Collection ID를 반환
		 * @param collectionName
		 * @param groupIndex
		 * @param docIndex
		 * @return 그룹에 속하는 문서중 특정 문서의 필드값을 반환한다. 실패할 경우 null값을 반환한다.
		 */
		public String getCollectionIdInGroup(String collectionName, int groupIndex, int docIndex) {
			int cnt = 0;
			int chk = checkValidCollection("[w3GetCollectionIdInGroup] [getCollectionIdInGroup]", collectionName);
			if(chk == -1){
				return null;
			}
			return common.getCollectionIdInGroup(collectionName, groupIndex, docIndex);
		}
		
		/**
		 * 그룹에 속하는 문서중 특정 문서의 Ranking값을 구한다.
		 * @param collectionName
		 * @param groupIndex
		 * @param docIndex
		 * @return 그룹에 속하는 문서중 특정 문서의 필드값을 반환한다. 실패할 경우 -1값을 반환한다.
		 */
		public long getRankInGroup(String collectionName, int groupIndex, int docIndex) {
			int cnt = 0;
			int chk = checkValidCollection("[w3GetRankInGroup] [getRankInGroup]", collectionName);
			if(chk == -1){
				return -1;
			}
			return common.getRankInGroup(collectionName, groupIndex, docIndex);
		}
		
		/**
		 * 그룹에 속하는 문서중 특정 문서의 필드값을 구한다.
		 * @param collectionName
		 * @param fieldName
		 * @param groupIndex
		 * @param docIndex
		 * @return 그룹에 속하는 문서중 특정 문서의 필드값을 반환한다. 실패할 경우 null값을 반환한다.
		 */
		public String getFieldInGroup(String collectionName, String fieldName, int groupIndex, int docIndex) {
			int cnt = 0;
			int chk = checkValidCollection("[w3GetFieldInGroup] [getFieldInGroup]", collectionName);
			if(chk == -1){
				return null;
			}
			chk = checkValidDocumentField(collectionName, fieldName, RESULT_FIELD);
			if(chk == -1){
				appendWarnings("[WARNING] [w3AddDocumentField] [setResultFieldInfo] [" + collectionName + "] RESULT_FIELD should be defined.");
				return null;
			}
			return common.getFieldInGroup(collectionName, fieldName, groupIndex, docIndex);
		}

		/**
		 * 그룹에 속하는 문서중 특정 문서의 UID값을 구한다.
		 * @param collectionName
		 * @param groupIndex
		 * @param docIndex
		 * @return 그룹에 속하는 문서중 특정 문서의 UID값을 반환한다. 실패할 경우 0보다 작은 값을 반환한다.
		 */
		public long getUidInGroup(String collectionName, int groupIndex, int docIndex) {
			int cnt = 0;
			int chk = checkValidCollection("[w3getUidInGroup] [getCountInGroup]", collectionName);
			if(chk == -1){
				return -1;
			}
			return common.getUidInGroup(collectionName, groupIndex, docIndex);
		}

		/**
		 * 그룹에 속하는 문서중 특정 문서의 가중치값을 구한다.
		 * @param collectionName
		 * @param groupIndex
		 * @param docIndex
		 * @return 그룹에 속하는 문서중 특정 문서의 가중치값을 반환한다. 실패할 경우 0보다 작은 값을 반환한다.
		 */
		public long getWeightInGroup(String collectionName, int groupIndex, int docIndex) {
			int cnt = 0;
			int chk = checkValidCollection("[w3getUidInGroup] [getCountInGroup]", collectionName);
			if(chk == -1){
				return -1;
			}
			return common.getWeightInGroup(collectionName, groupIndex, docIndex);
		}

		/**
		 * 그룹에 속하는 문서중 특정 문서의 날짜정보값을 구한다.
		 * @param collectionName
		 * @param groupIndex
		 * @param docIndex
		 * @return 그룹에 속하는 문서중 특정 문서의 날짜정보값을 반환한다. 실패할 경우 빈문자열을 반환한다.
		 */
		public String getDateInGroup(String collectionName, int groupIndex, int docIndex) {
			int cnt = 0;
			int chk = checkValidCollection("[w3getUidInGroup] [getCountInGroup]", collectionName);
			if(chk == -1){
				return "";
			}
			return common.getDateInGroup(collectionName, groupIndex, docIndex);
		}
		
		
		/**
		 * 그룹에 속하는 문서중 특정 문서의 검색기 아이디값을 구한다.
		 * @param collectionName
		 * @param groupIndex
		 * @param docIndex
		 * @return 그룹에 속하는 문서중 특정 문서의 검색기 아이디값을 반환한다. 실패할 경우 빈문자열을 반환한다.
		 */
		public String getSearcherIdInGroup(String collectionName, int groupIndex, int docIndex) {
			int cnt = 0;
			int chk = checkValidCollection("[w3GetSearcherIdInGroup] [getSearcherIdInGroup]", collectionName);
			if(chk == -1){
				return "";
			}
			return common.getSearcherIdInGroup(collectionName, groupIndex, docIndex);
		}

		/**
		 * 검색하고자 하는 컬렉션의 결과 필드를 설정한다.
		 * @param idx 검색하고자 하는 컬렉션의 index
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int setResultFieldInfo(int idx) {
			int ret = 0;
			String resultFields = wncol.COLLECTION_INFO[idx][RESULT_FIELD];
			String[] resultFieldList = split(resultFields,",");
			if(resultFieldList.length < 1) {
				appendWarnings("[WARNING] [w3AddDocumentField] [setResultFieldInfo] [" + COLLECTIONS[idx] + "] RESULT_FIELD should be defined.");
				return -1;
			}
			int i = checkFieldName("[w3AddDocumentField]", COLLECTIONS[idx], resultFieldList, RESULT_FIELD);
			if( i != 0 ) {
				appendWarnings("[WARNING] [w3AddDocumentField] [setResultFieldInfo] [" + COLLECTIONS[idx] + "] '" + resultFieldList[i-1] + "' is not exist.");
				return -1;
			}
			ret = common.setResultField(COLLECTIONS[idx], resultFields);
			return ret;
		}

		/**
		 * 검색 조건을 만족하는 레코드로 가져온 개수,
		 * 검색 조건의 start 위치에서부터 count보다 같거나 작은 개수를 가져온다.
		 * @param collectionName
		 * @return 성공이면 검색결과 개수을 반환한다. 실패하거나 결과가 없을 경우 0 값을 반환한다.
		 */
		public int getResultCount (String collectionName) {
			int cnt = 0;
			int chk = checkValidCollection("[w3GetResultCount] [getResultCount]", collectionName);
			if(chk == -1){
				return cnt;
			}
			return common.getResultCount(collectionName);
		}

		/**
		 * 검색 조건을 만족하는 총 검색 결과 개수
		 * @param collectionName
		 * @return 성공이면 검색결과 총 개수을 반환한다. 실패하거나 결과가 없을 경우 0 값을 반환한다.
		 */
		public int getResultTotalCount (String collectionName) {
			int chk = checkValidCollection("[w3GetResultTotalCount] [getResultTotalCount]", collectionName);
			if(chk == -1){
				return chk;
			}
			return common.getResultTotalCount(collectionName);
		}

		/**
		 * 현재 검색 되고 있는 실시간 검색어 리스트를 얻는다.
		 * @param count 실시간 검색어 개수
		 * @return 실시간 검색어 리스트를 반환한다.
		 */
		public String recvRealTimeSearchKeywordList(int count) {
			StringBuffer sbKey = new StringBuffer();
			String[] keywordList = common.receiveRecentQueryListResult(CONNECTION_KEEP, count);
			if(keywordList != null){
				int keyCount = keywordList.length;
				for(int i = 0; i < keyCount; i++){
					sbKey.append(keywordList[i].replaceAll("'", "").replaceAll("\\\\", ""));
					if(i < keywordList.length - 1) {
						sbKey.append(",");
					}
				}
			} else {
				return "";
			}
			return sbKey.toString();
		}

		/**
		 * 검색 결과 필드의 값을 얻는다. field명에 따라서 UID, RANK, DATE 값을 얻을 수 있다.
		 * @param collectionName 결과를 얻고자 하는 컬렉션 이름
		 * @param field 결과 필드
		 * @param idx 검색결과 컬렉션의 index
		 * @param isHL 하이라이팅을 할 것인지 여부를 결정
		 * @return FIELD VALUE
		 */
		public String getField(String collectionName, String field, int idx, boolean isHL) {
			String ret = "";
			if (collectionName.equals("")) return ret;
			if (field.toUpperCase().equals("UID")) {
				ret = String.valueOf(common.getUid(collectionName, idx));
			}else if (field.toUpperCase().equals("RANK")) {
				ret = String.valueOf(common.getRank(collectionName, idx));
			}else  if (field.toUpperCase().equals("DATE")) {
				ret = parseDate(common.getDate(collectionName, idx),"yyyy/MM/dd HH:mm:ss","yyyy.MM.dd");
			}else  if (field.toUpperCase().equals("WEIGHT")) {
				ret = String.valueOf(common.getWeight(collectionName, idx));
			}else  if (field.toUpperCase().equals("SEARCHERID")) {
				ret = common.getSearcherId(collectionName, idx);
			}else  if (field.toUpperCase().equals("COLLECTIONID")) {
				ret = common.getCollectionId(collectionName, idx);
			}else {
				
				if (checkValidDocumentField(collectionName, field, RESULT_FIELD) == -1) {
					return ret;
				}
				if(isHL){
					ret = getKeywordHl(common.getField(collectionName, field ,idx), "red");
				}else{
					ret = common.getField(collectionName, field ,idx);
				}
			}
            return ret;
		}
		
		/**
		* 여러 컬렉션의 검색결과를 하나의 가상 통합 컬렉션(Merge Collection) 결과로 통합하여 가져오기 원할 때 사용하는 함수
		* @param idx 검색하고자 하는 컬렉션의 index
		* @return 성공이면 검색결과 총 개수을 반환한다. 실패하거나 결과가 없을 경우 0 값을 반환한다.
		*/
		public int setMergeCollectionBasicnfo(int idx) {
			int ret = 0;
			
			String mergeCollectionName = wncol.MERGE_COLLECTION_INFO[idx][MERGE_COLLECTION_NAME];
			String[] collectionNames = split(wncol.MERGE_COLLECTION_INFO[idx][MERGE_MAPPING_COLLECTION_NAME], "/");
			String[] pageInfo = split(wncol.MERGE_COLLECTION_INFO[idx][MERGE_PAGE_INFO], ",");
			if(pageInfo.length < 2 ) {
				appendWarnings("[WARNING] [setMergeCollectionBasicnfo] [PageInfo : '" + wncol.MERGE_COLLECTION_INFO[idx][MERGE_PAGE_INFO]		
						+ "' error");
				return -1;
			}
			int length = collectionNames.length;
			for(int i=0; i<length; i++) {
				int chk = checkValidCollection("[setMergeCollectionBasicnfo]", collectionNames[i]);
				if(chk == -1){
					return -1;
				}
			}
			
			int start = parseInt(pageInfo[0], 0);
			int count = parseInt(pageInfo[1], 10);
			
			
			ret = common.addMergeCollectionInfo(mergeCollectionName, collectionNames, start, count);
			
			return ret;		
		}
		
		/**
		* 가상 통합 컬렉션(Merge Collection)의 가상 결과 필드(Document Field)와 통합될 개별 Collection의 실제 결과 필드명을 연결시킨다.
		* @param idx 검색하고자 하는 컬렉션의 index
		* @return 성공이면 검색결과 총 개수을 반환한다. 실패하거나 결과가 없을 경우 0 값을 반환한다.
		*/
		public int addMergeDocumentField(int idx) {
			int ret = 0;
			String mergeCollectionName = wncol.MERGE_COLLECTION_INFO[idx][MERGE_COLLECTION_NAME];
			String[] collectionNames = split(wncol.MERGE_COLLECTION_INFO[idx][MERGE_MAPPING_COLLECTION_NAME], "/");
			
			int collectionLength = collectionNames.length;
			for(int i=0; i < collectionLength; i++) {
				int chk = checkValidCollection("[setMergeCollectionBasicnfo]", collectionNames[i]);
				if(chk == -1){
					return -1;
				}
			}
		
			String[] mergeFields = split(wncol.MERGE_COLLECTION_INFO[idx][MERGE_RESULT_FIELD], ",");
			int mergeFieldLength = mergeFields.length;
			
			String[][] documentFields = new String[collectionLength][mergeFieldLength];
			String[] temp = split(wncol.MERGE_COLLECTION_INFO[idx][MERGE_MAPPING_RESULT_FIELD], "/");
			
			for(int k=0; k < collectionLength; k++) {
				for(int n=0; n < temp.length; n++) {
					if( k == n ) documentFields[k] = split(temp[n], ",");
					if(mergeFieldLength != documentFields[k].length){
						appendWarnings("[Error] [addMergeDocumentField] [merge fields, collection document and different.]");
						return -1;
					}
				}
			}
			
			ret = common.addMergeDocumentField(mergeCollectionName, mergeFields, collectionNames, documentFields);
			
			return ret;		
		}
		
		
		/**
		 * 가상 통합 컬렉션(Merge Collection)의 Multi Group-By 필드명의 정의 및 개별 Collection의 Multi Group-By 필드명과 연결시키는 역할을 한다.
		 * @param idx 검색하고자 하는 컬렉션의 index
		 * @return 성공이면 검색결과 총 개수을 반환한다. 실패하거나 결과가 없을 경우 0 값을 반환한다.
		 */
		 public int addMergeMultiGroupBy(int idx) {
			int ret = 0;
			if (!wncol.MERGE_COLLECTION_INFO[idx][MERGE_MULTI_GROUP_BY_FIELD].equals("")) {				
				String mergeCollectionName = wncol.MERGE_COLLECTION_INFO[idx][MERGE_COLLECTION_NAME];
				String[] collectionNames = split(wncol.MERGE_COLLECTION_INFO[idx][MERGE_MAPPING_COLLECTION_NAME], "/");
				
				int collectionLength = collectionNames.length;
				for(int i=0; i < collectionLength; i++) {
					int chk = checkValidCollection("[addMergeMultiGroupBy]", collectionNames[i]);
					if(chk == -1){
						return -1;
					}
				}
			
				String[] mergeMultiGroupByFields = split(wncol.MERGE_COLLECTION_INFO[idx][MERGE_MULTI_GROUP_BY_FIELD], ",");
				int mergeLength = mergeMultiGroupByFields.length;
				
				String[][] documentFields = new String[collectionLength][mergeLength];
				String[] temp = split(wncol.MERGE_COLLECTION_INFO[idx][MERGE_MAPPING_MULTI_GROUP_BY_FIELD], "/");
				
				for(int k=0; k < collectionLength; k++) {
					for(int n=0; n < temp.length; n++) {
						if (k==n) documentFields[k] = split(temp[n], ",");
						if(mergeLength != documentFields[k].length){
							appendWarnings("[Error] [addMergeMultiGroupBy] [merge multi-group-by, collection multi-group-by and different.]");
							return -1;
						}
					}
				}
				
				ret = common.addMergeMultiGroupByField(mergeCollectionName, mergeMultiGroupByFields, collectionNames, documentFields);
			}
			return ret;
		}
		
		 /**
		 * 가상 통합 컬렉션(Merge Collection)의 카테고리 그룹 필드명의 정의 및 개별 Collection의 카테고리 그룹 필드명과 연결시키는 역할을 한다.
		 * @param idx  검색하고자 하는 컬렉션의 index
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		 public int addMergeCategoryGroupByField(int idx) {
			int ret = 0;
			if (!wncol.MERGE_COLLECTION_INFO[idx][MERGE_CATEGORY_GROUPBY_FIELD].equals("")) {
				
				String mergeCollectionName = wncol.MERGE_COLLECTION_INFO[idx][MERGE_COLLECTION_NAME];
				String[] collectionNames = split(wncol.MERGE_COLLECTION_INFO[idx][MERGE_MAPPING_COLLECTION_NAME], "/");
				
				int collectionLength = collectionNames.length;
				for(int i=0; i < collectionLength; i++) {
					int chk = checkValidCollection("[addMergeCategoryGroupByField]", collectionNames[i]);
					if(chk == -1){
						return -1;
					}
				}
			
				String[] mergeCategoryGroupByFields = split(wncol.MERGE_COLLECTION_INFO[idx][MERGE_CATEGORY_GROUPBY_FIELD], ",");
				int mergeCategoryLength = mergeCategoryGroupByFields.length;
				
				String[][] documentFields = new String[collectionLength][mergeCategoryLength];
				String[] temp = split(wncol.MERGE_COLLECTION_INFO[idx][MERGE_MAPPING_CATEGORY_GROUPBY_FIELD], "/");
				
				for(int k=0; k < collectionLength; k++) {
					for(int n=0; n < temp.length; n++) {
						if (k == n) documentFields[k] = split(temp[n], ",");
						if(mergeCategoryLength != documentFields[k].length){
							appendWarnings("[Error] [addMergeCategoryGroupByField] [merge category-group-by, collection category-group-by and different.]");
							return -1;
						}
					}
				}
				
				
				ret = common.addMergeCategoryGroupByField(mergeCollectionName, mergeCategoryGroupByFields, collectionNames, documentFields);
			}
			return ret;
		}
		
		
		 /**
		 * 하나의 가상 통합 컬렉션(Merge Collection)으로 병합된 개별 Collection에서 검색된 문서의 전체 개수를 반환한다.
		 * @param mergeCollection 가상컬렉션 이름
		 * @param collectionName 컬렉션 이름
		 * @return 성공이면 검색결과 총 개수을 반환한다. 실패하거나 결과가 없을 경우 0 값을 반환한다.
		 */
		public int getResultTotalCountInMerge (String mergeCollection, String collection) {
			int cnt = 0;
			
			int chk = checkValidCollection("[w3GetResultTotalCountInMerge] [getResultTotalCountInMerge]", collection);
			if(chk == -1){
				return cnt;
			}
			return common.getResultTotalCountInMerge(mergeCollection, collection);
		}
		 
		/**
		* 검색결과를 XML 데이터로 반환
		*/
		public String getResultXml() {
			return common.getResultXml();
		}
		
		/**
		* 검색결과를 JSON 데이터로 반환
		*/
		public String getResultJson() {
			return common.getResultJson();
		}
		
		

		/**
		 * 네트워크 종료
		 */
		public void closeServer(){
		    common.closeServer();
		}


		/**
		 * 검색된 키워드의 분석 결과의 리스트를 얻어서 인자로 받은 문자열에 하이라이팅 한다.
		 * @param content 하이라이팅 하고자 하는 문자열
		 * @param color
		 * @return 하이라이팅된 문자열을 반환한다.
		 */
		public String getKeywordHl(String content, String color) {
			if(content != null) {
				content = content.replaceAll("<!HS>", "<font color='" + color + "'>");
				content = content.replaceAll("<!HE>", "</font>");
			}
			return content;
		}


		/**
		 * 검색된 키워드의 분석 결과의 리스트를 얻어서 인자로 받은 문자열에 하이라이팅 한다.
		 * @param content 하이라이팅 하고자 하는 문자열
		 * @param startTag 하이라이팅 하고자 하는 Tag의 시작 문자
		 * @param endTag 하이라이팅 하고자 하는 Tag의 끝 문자
		 * @return 하이라이팅된 문자열을 반환한다.
		 */
		public String getKeywordHl(String content, String startTag, String endTag) {
			if(content != null) {
				content = replace(content, "<!HS>", startTag);
				content = replace(content, "<!HE>", endTag);
			}
			return content;
		}


		/**
		 * WNCollection에서 정의된 COLLECTIONS의 index를 얻는다.
		 * @param collName 검색하고자 하는 컬렉션의 이름
		 * @return 컬렉션 index를 반환한다.
		 */
		public int getCollIdx(String collName) {
			for(int i=0; i < COLLECTIONS.length; i++) {
				if (COLLECTIONS[i].trim().equals(collName.trim())) return i;
			}
			return -1;
		}
		
		/**
		 * WNCollection에서 정의된 MERGE COLLECTIONS의 index를 얻는다.
		 * @param collName 검색하고자 하는 컬렉션의 이름
		 * @return 컬렉션 index를 반환한다.
		 */
		public int getMergeCollIdx(String collName) {
			for(int i=0; i < MERGE_COLLECTIONS.length; i++) {
				if( MERGE_COLLECTIONS[i].trim().equals(collName.trim()) ) return i;
			}
			return -1;
		}
		
		/**
		* 검색 후 해당 Collection의 Erro정보를 반환한다.
		* @param collectionName 검색을 수행한 컬렉션 이름
		* @return collection의 에러정보
		*/
		public String getCollectionErrorInfo(String collectionName) {
			return common.getCollectionErrorInfo(collectionName);
		}
		
		/**
		* 검색 API의 버전정보를 반환한다.
		* @return API 버전정보
		*/
		public String getVersionInfo() {
			return common.getVersionInfo();
		}

		/**
		 * 형태소 분석 및 대소문자 값을 체크한다.
		 * @param useKma 형태소 분석 값
		 * @param isCase 대소문자 구분 여부
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int checkKeywordAnalyzer(String collectionName, int useKma, int isCase, int useOriginal, int useSynonym, int useDuplicateDetection) {
			int chk = 0;
			if(useKma != 0 && useKma != 1 && useKma != 2) {
				appendWarnings("[WARNING] [w3SetQueryAnalyzer] [checkKeywordAnalyzer] ["+ collectionName + "] '" + useKma + "' is not kma option");
				return -1;
			}
			if(isCase != 0 && isCase != 1) {
				appendWarnings("[WARNING] [w3SetQueryAnalyzer] [checkKeywordAnalyzer] ["+ collectionName + "] '" + isCase + "' is not case option");
				return -1;
			}
			if(useOriginal != 0 && useOriginal != 1) {
				appendWarnings("[WARNING] [w3SetQueryAnalyzer] [checkKeywordAnalyzer] ["+ collectionName + "] '" + useOriginal + "' is not use original option");
				return -1;
			}
			if(useSynonym != 0 && useSynonym != 1) {
				appendWarnings("[WARNING] [w3SetQueryAnalyzer] [checkKeywordAnalyzer] ["+ collectionName + "] '" + useSynonym + "' is not use synonym option");
				return -1;
			}
			if(useDuplicateDetection !=0 && useDuplicateDetection != 1) {
				appendWarnings("[WARNING] [w3SetQueryAnalyzer] [checkKeywordAnalyzer] ["+ collectionName + "] '" + useDuplicateDetection + "' is not use duplicate detection option");
				return -1;
			}
			
			return chk;
		}


		/**
		 * 검색하고자 하는 컬렉션을 체크한다.
		 * @param collectionName 검색하고자 하는 컬렉션
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int checkValidCollection(String msg, String collectionName) {
			
			int chk = getCollIdx(collectionName);
			if(chk == -1 && mergeCollections != null) { //merge collection에서 check를 다시한다.
				chk = getMergeCollIdx(collectionName);
			}		
			
			if(chk == -1) {
				appendWarnings("[WARNING] "+msg+" [" + collectionName + "] Collection name is not exist.");
			}
			return chk;
		}


		/**
		 * 필드를 체크하는 각 함수에서 사용된다.
		 * @param collectionName 검색하고자 하는 컬렉션
		 * @param field 필드 이름
		 * @param item WNCollection에 지정된 상수
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int checkValidField(String collectionName, String field, int item) {
			
			int idx = getCollIdx(collectionName);
			String[] fields = split(wncol.COLLECTION_INFO[idx][item], ",");
			int chk = findArrayValue(field, fields);
			return chk;
		}

		
		/**
		 * 필드를 체크하는 각 함수에서 사용된다.
		 * @param collectionName 검색하고자 하는 컬렉션
		 * @param field 필드 이름
		 * @param item WNCollection에 지정된 상수
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int checkValidDocumentField(String collectionName, String field, int item) {
			int chk = -1;			
			int idx = getCollIdx(collectionName);
			if(idx != -1){
				String[] fields = split(wncol.COLLECTION_INFO[idx][item], ",");
				int length = fields.length;
				
				for(int i=0; i<length; i++) {
				    String[] documentFields = split(fields[i], "/");
					if(documentFields != null && documentFields.length > 0 && documentFields[0].equals(field)){
						chk = i;
					}
				}
			}else{	//merge collection도 체크한다.			
				idx = getMergeCollIdx(collectionName);
				if(idx != -1) {				
					String[] fields = split(wncol.MERGE_COLLECTION_INFO[idx][MERGE_RESULT_FIELD], ",");
					int length = fields.length;				
					for(int i=0; i<length; i++) {
						if(fields[i].equals(field)){
							chk = i;
						}
					}
                    if (chk == -1) {
						String[] fields1 = split(wncol.MERGE_COLLECTION_INFO[idx][MERGE_CATEGORY_GROUPBY_FIELD], ",");
						length = fields1.length;				
						for(int ii=0; ii<length; ii++) {
							if(fields1[ii].equals(field)){
								chk = ii;
							}
						}
					}
				}	
			}			
			
			return chk;
		}
		
		/**
		 * 검색하고자 하는 컬렉션의 각 필드 값을 체크한다.
		 * @param msg 화면에 출력할 메시지
		 * @param collectionName 검색하고자 하는 컬렉션
		 * @param fields 체크하고자 하는 필드
		 * @param item WNCollection에 지정된 상수
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int checkFieldName(String msg, String collectionName, String[] fields, int item) {
			int chk = 0;
			for(int i=0; i<fields.length; i++) {
				if(fields[i] == null || (checkValidField(collectionName, fields[i], item) == -1)) {
					return i+1;
				}
			}
			return chk;
		}


		/**
		 * 검색하고자 하는 컬렉션의 확장 필드 값을 체크한다.
		 * @param msg 화면에 출력할 메시지
		 * @param collectionName 검색하고자 하는 컬렉션
		 * @param value 체크하고자 하는 필드
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int checkExFieldName(String msg, String collectionName, String value) {
			int chk = 0;
			String[] replaceChar = new String[]{"!", "|", "(", ")", "[", "]", "{", "}", "\"", "^", "<", ">"};
			for(int i=0; i < replaceChar.length; i++) {
				value = replace(value, replaceChar[i], " ");
			}

			String[] fieldName = split(value, " ");
			for(int i=0; i < fieldName.length; i++) {
				int index = 0;
				if(fieldName[i].indexOf(":", 0) != -1) {
					index = fieldName[i].indexOf(":", 0);
					fieldName[i] = fieldName[i].trim().substring(0, index);
				}
				// 확장검색 필드 검사
				if(checkValidField(collectionName, fieldName[i], PREFIX_FIELD) == -1) {
					appendWarnings("[WARNING] " + msg + "[" + collectionName + "] " +fieldName[i]+ " is not prefix field.");
					chk = -1;
				}
			}
			return chk;
		}

		/**
		 * 검색하고자 하는 컬렉션의 쿼리 필드 값을 체크한다.
		 * @param msg 화면에 출력할 메시지
		 * @param collectionName 검색하고자 하는 컬렉션
		 * @param value 체크하고자 하는 필드
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int checkCollectionQueryFieldName(String msg, String collectionName, String value) {
			int chk = 0;
			String[] replaceChar = new String[]{"!", "|", "(", ")", "[", "]", "{", "}", "\"", "^", "<", ">"};
			for(int i=0; i < replaceChar.length; i++) {
				value = replace(value, replaceChar[i], " ");
			}

			String[] fieldName = split(value, " ");
			for(int i=0; i < fieldName.length; i++) {
				int index = 0;
				if(fieldName[i].indexOf(":", 0) != -1) {
					index = fieldName[i].indexOf(":", 0);
					fieldName[i] = fieldName[i].trim().substring(0, index);
				}
				String[] fields = fieldName[i].split(",");
				for(int j=0;j < fields.length; j++){
					// 컬렉션 쿼리 필드 검사
					if(checkValidField(collectionName, fields[j], PREFIX_FIELD) != -1) {
						appendWarnings("[WARNING] " + msg + "[" + collectionName + "] " +fields[j]+ " is prefix field.");
						chk = -1;
					}
				}
			}
			return chk;
		}

		/**
		 * 검색하고자 하는 컬렉션의 필터링 필드 값을 체크한다.
		 * @param msg 화면에 출력할 메시지
		 * @param collectionName 검색하고자 하는 컬렉션
		 * @param value 체크하고자 하는 필드
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int checkFilterFieldName(String msg, String collectionName, String value) {
			int chk = 0;
			String[] replaceChar = new String[]{"|", "(", ")", "[", "]", "{", "}", "\"", "^"};
			for(int i=0; i < replaceChar.length; i++) {
				value = replace(value, replaceChar[i], " ");
			}

			String[] fieldName = split(value, " ");
			for(int i=0; i < fieldName.length; i++) {
				int index = 0;
				if(fieldName[i].indexOf("<", 0) != -1) {
					index = fieldName[i].indexOf("<", 0);
					fieldName[i] = fieldName[i].trim().substring(0, index);
					// 필터링 검색 필드 검사
					if(checkValidField(collectionName, fieldName[i], FAST_ACCESS) == -1) {
						appendWarnings("[WARNING] " + msg + " [" + collectionName + "] " +fieldName[i]+ " is not fastaccess field.");
						chk = -1;
					}
				}
			}
			return chk;
		}


		/**
		 * 검색결과의 지정 범위를 체크한다.
		 * @param collectionName 검색하고자 하는 컬렉션
		 * @param highlight 하이라이팅 옵션 값
		 * @param startPos 검색결과 시작 offset
		 * @param resultCnt 검색 결과 count
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int checkSetPageInfo(String collectionName, int highlight, int startPos, int resultCnt) {
			int chk = 0;
			if(highlight < 0 || highlight> 3 || startPos < 0 || resultCnt < 0) {
				appendWarnings("[WARNING] [] [checkSetPageInfo] [" + collectionName + "] Highlight: '"
	                        + highlight + "', StartPosition: '"+startPos+ "', ResultCount: '"+resultCnt+"' is invalid value");
				return -1;
			}
			return chk;
		}


		/**
		 * 검색 정렬 필드를 체크한다.
		 * @param collectionName 검색하고자 하는 컬렉션
		 * @param sortField 정렬필드
		 * @param sortOrder 오름차순/내림차순
		 * @return 성공이면 0을 반환한다. 실패면 0이 아닌 값을 반환한다.
		 */
		public int checkSortFieldName(String collectionName, String sortField, String sortOrder) {
			if(sortField.toUpperCase().equals("DATE")) {
				if(sortOrder.equals("DESC") == false && sortOrder.equals("ASC") == false) {
					//DATE는 오름차순과 내림차순으로만 정렬 가능
					appendWarnings("[ERROR] [w3AddSortField] [checkSortFieldName] [" + collectionName + "] Date sortOrder is '" + sortOrder + "'. Only DESC or ASC is allowed.");
					return -1;
				}
			} else if(sortField.toUpperCase().equals("RANK")) {
				if(sortOrder.equals("DESC") == false) {
					//RANK는 내림차순(1)으로만 정렬 가능
					appendWarnings("[ERROR] [w3AddSortField] [checkSortFieldName] [" + collectionName + "] RANK sortOrder is '" + sortOrder +"' Only DESC is allowed.");
					return -1;
				}
			}else if(sortField.toUpperCase().equals("WEIGHT")) {
				if(sortOrder.equals("DESC") == false && sortOrder.equals("ASC") == false) {
					//WEIGHT는 오름차순(0)과 내림차순(1)으로만 정렬 가능
					appendWarnings("[ERROR] [w3AddSortField] [checkSortFieldName] [" + collectionName + "] WEIGHT sortOrder is '" + sortOrder +"' Only DESC or ASC is allowed");
					return -1;
				}
			}else if(sortField.toUpperCase().equals("UID")) {
				if(sortOrder.equals("DESC") == false && sortOrder.equals("ASC") == false) {
					//UID는 오름차순(0)과 내림차순(1)으로만 정렬 가능
					appendWarnings("[ERROR] [w3AddSortField] [checkSortFieldName] [" + collectionName + "] UID sortOrder is '" + sortOrder +"' Only DESC or ASC is allowed");
					return -1;
				}
			}else {
				// 정렬 필드 검사
				if(checkValidDocumentField(collectionName, sortField, RESULT_FIELD) == -1) {
					appendWarnings("[ERROR] [w3AddSortField] [checkSortFieldName] [" + collectionName + "] '" + sortField + "' is not exist.");
					return -1;
				}
				if(checkValidField(collectionName, sortField, FAST_ACCESS) == -1) {
					// fastaccess가 지정되지 않은 필드에서 속도 느릴수 있음.
					appendWarnings("[WARNING] [w3AddSortField] [checkSortFieldName] [" + collectionName + "] " +sortField+ " is not fastaccess field.");
				}
			}
			return 0;
		}

		/**
		 * 디버그 메시지를 구성한다.
		 * @param isRealQuery
		 * @param query
		 */
		public void debugMsg(boolean isRealQuery, String query){
			sb.append("[CHARSET] " + CHARSET + " [QUERY] " + query);
			sb.append("<br>[w3ConnectServer] [IP] " + SEARCH_IP + " [PORT] " + SEARCH_PORT + " [TIMEOUT]" + CONNECTION_TIMEOUT);
			if(!isUidSrch) {
				sb.append("<br>[w3RecvResult] Mode : " + this.connectionOpt);
				if(isRealQuery){
					sb.append("<br>[W3ReceiveRecentQueryListResult] Set Count : " + REALTIME_COUNT);
				}
			}

			sb.append("<br>");
			for(int i=0; i < collections.length; i++) {
				int idx = getCollIdx(collections[i]);

				if(idx < 0){
					return;
				}
				int count = 0;

				// 컬렉션 정보
				String content = wncol.COLLECTION_INFO[idx][INDEX_NAME];
				if(content != null && !content.equals("")){
					sb.append("<br>[w3AddCollection] <b>" + content + "</b>");
				}
				if(!isUidSrch) {
					//페이지 설정
					content = wncol.COLLECTION_INFO[idx][PAGE_INFO];
					if(content != null && !content.equals("")){
						sb.append("<br>[w3SetPageInfo] " + content);
					}

					//분석 정보
					content = wncol.COLLECTION_INFO[idx][ANALYZER];
					if(content != null && !content.equals("")){
						sb.append("<br>[w3SetQueryAnalyzer] " + content);
					}

					//하이라이팅 정보
					count = this.hiSum;
					if(count >= 0){
						switch(count){
						case 0:
							content = " : Highlight off, Snippet off.";break;
						case 1:
							content = " : Highlight off, Snippet on.";break;
						case 2:
							content = " : Highlight on, Snippet off.";break;
						case 3:
							content = " : Highlight on, Snippet on.";break;
						default:
							content = " : wrong infomation";
						}
						sb.append("<br>[w3SetQueryAnalyzer] " + count + content);
					}

					//정렬 정보
					content = wncol.COLLECTION_INFO[idx][SORT_FIELD];
					if(content != null && !content.equals("")){
						sb.append("<br>[w3AddSortField] " + content);
					}

					//검색 필드 정보
					String search_field = wncol.COLLECTION_INFO[idx][SEARCH_FIELD];
					String[] searchField = search_field.split(",");

					content = wncol.COLLECTION_INFO[idx][SEARCH_FIELD];
					if(content != null && !content.equals("")){
						sb.append("<br>[w3AddSearchField] " );
						for(int k = 0; k<searchField.length; k++){
							if(k != 0){
								sb.append(", ");
							}
							sb.append(searchField[k]);
						}
					}

					//기간 정보
					content = wncol.COLLECTION_INFO[idx][DATE_RANGE];
					if(content != null && !content.equals("")){
						sb.append("<br>[w3SetDateRange] " + content);
					}

					//확장 검색  정보
					content = wncol.COLLECTION_INFO[idx][EXQUERY_FIELD];
					if(content != null && !content.equals("")){
						sb.append("<br>[w3SetPrefixQuery] " + content.replaceAll("<", "&lt;").replaceAll(">", "&gt;"));
					}

					//카테고리 부스트 정보
					content = wncol.COLLECTION_INFO[idx][CATEGORY_BOOST];
					if(content != null && !content.equals("")){
						sb.append("<br>[w3SetBoostCategory] " + content);
					}

					//컬렉션 쿼리 정보
					content = wncol.COLLECTION_INFO[idx][COLLECTION_QUERY];
					if(content != null && !content.equals("")){
						sb.append("<br>[w3SetCollectionQuery] " + content.replaceAll("<", "&lt;").replaceAll(">", "&gt;"));
					}

					//필터 정보
					content = wncol.COLLECTION_INFO[idx][FILTER_OPERATION];
					if(content != null && !content.equals("")){
						sb.append("<br>[w3SetFilterQuery] " + content.replaceAll("<", "&lt;").replaceAll(">", "&gt;"));
					}

					//그룹화  정보
					content = wncol.COLLECTION_INFO[idx][GROUP_BY];
					if(content != null && !content.equals("")){
						sb.append("<br>[w3SetGroupBy] " + content);
					}

					//그룹 정렬  정보
					content = wncol.COLLECTION_INFO[idx][GROUP_SORT_FIELD];
					if(content != null && !content.equals("")){
						sb.append("<br>[w3AddSortFieldInGroup] " + content);
					}


					if(!wncol.COLLECTION_INFO[idx][GROUP_BY].equals("")){
						//전체 그룹 개수 정보
						count = getResultGroupCount(collections[i]);
						if(count > 0){
							sb.append("<br>[w3GetGroupBycount] " + count);
						}
					}

                    // dedup field
                    content = wncol.COLLECTION_INFO[idx][DEDUP_SORT_FIELD];
                    if(content != null && !content.equals("")){
                        sb.append("<br>[w3SetDuplicateDetectionCriterionField] " + content);
                    }
				}

				//결과 필드 정보
				content = wncol.COLLECTION_INFO[idx][RESULT_FIELD];
				if(content != null && !content.equals("")){
					sb.append("<br>[w3AddDocumentField] " + content);
				}
				sb.append("<br>");
			}
			
			//merge collection debug info
			if(mergeCollections != null) {
				for(int i=0; i < mergeCollections.length; i++) {
					int idx = getMergeCollIdx(mergeCollections[i]);

					if(idx < 0){
						return;
					}
					
					//merge collection name 정보
					String content = wncol.MERGE_COLLECTION_INFO[idx][MERGE_COLLECTION_NAME];
					String mappingColl =  wncol.MERGE_COLLECTION_INFO[idx][MERGE_MAPPING_COLLECTION_NAME];
					if(content != null && !content.equals("") && mappingColl != null && !mappingColl.equals("")){
						sb.append("<br>[w3AddMergeCollection] <b>" + content + "</b>, [Collection Name]<b>" + mappingColl + "</b>");
					}
					
					content = wncol.MERGE_COLLECTION_INFO[idx][MERGE_PAGE_INFO];
					if(content != null && !content.equals("")){
						sb.append("<br>[w3SetMergePageInfo] " + content);
					}
					
					content = wncol.MERGE_COLLECTION_INFO[idx][MERGE_RESULT_FIELD];
					String mappingDocs = wncol.MERGE_COLLECTION_INFO[idx][MERGE_MAPPING_RESULT_FIELD];
					if(content != null && !content.equals("") && mappingDocs != null && !mappingDocs.equals("")){
						sb.append("<br>[w3AddMergeDocumentField] " + content + ", [Collection Document Fields]" + mappingDocs);
					}
					
					content = wncol.MERGE_COLLECTION_INFO[idx][MERGE_MULTI_GROUP_BY_FIELD];
					String mappingMulti = wncol.MERGE_COLLECTION_INFO[idx][MERGE_MAPPING_MULTI_GROUP_BY_FIELD];
					if(content != null && !content.equals("") && mappingMulti != null && !mappingMulti.equals("")){
						sb.append("<br>[w3AddMergeMultiGroupByField] " + content + ", [Collection Multi-Groupby Fields]" + mappingMulti);
					}
					
					content = wncol.MERGE_COLLECTION_INFO[idx][MERGE_CATEGORY_GROUPBY_FIELD];
					String mappingCategory = wncol.MERGE_COLLECTION_INFO[idx][MERGE_MAPPING_CATEGORY_GROUPBY_FIELD];
					if(content != null && !content.equals("") && mappingCategory != null && !mappingCategory.equals("")){
						sb.append("<br>[w3AddMergeCategoryGroupByField] " + content + ", [Collection Category Groupby Fields]" + mappingCategory);
					}
				}
				
				sb.append("<br>");
			}
		}

		/**
		 * 경고 메시지를 버퍼에 저장한다.
		 * @param msg 경고 메시지
		 */
		public void appendWarnings(String msg) {
			if(isDebug && !msg.equals("")){
				warningMsg.append(msg + "<br>");
			}
		}


		/**
		 * 에러 메시지를 버퍼에 저장한다.
		 * @param msg 에러 메시지
		 */
		public void appendErrors(String msg) {
			if(!msg.equals("")){
				sb.append("<br>" + msg + "<br>");
			}
		}

		/**
		 * 디버그 정보를 화면에 출력할 경우 메시지를 반환한다.
		 * @return 디버그 정보 반환
		 */
		public String printDebug() {
			if(!warningMsg.toString().equals("")){
				return sb.toString() + "<br>" + warningMsg.toString()+ "<br>";
			}
			return sb.toString();
		}

		/**
		 * 관리도구의 경로를 지정한다.
		 * @param managerURL 관리도구 경로
		 */
		public void setManagerMode(String managerURL){
			if(managerURL != null && !managerURL.trim().equals("")){
				this.managerURL = managerURL;
			}
		}

		/*
		 * 매니저 동작 준비 테그를 생성한다.
		 * @param colName 컬렉션 명
		 * @param idx 결과 인덱스
		 * @param docid 특정 결과 DOCID
		 * @return 매니저 동작 준비 테그
		 */
		public String getManagerOperationTag(String colName, int idx, String docid){
			String uniid = colName + "_" + idx;
			if (!this.managerURL.equals("")){
				return "<input type='checkbox' name='manager_idx' id='" + uniid + "'  value='checkbox' onclick=\"javascript:manager_addDocIdForDelete('" + colName + "', '" + docid + "', '" + uniid + "')\" />" + docid + "&nbsp";
			}else{
				return "";
			}
		}

		/*
		 * 매니저 동작 테그를 생성한다.
		 * @param transferURL xml 파싱 파일 경로
		 * @return 매니저 동작 테그
		 */
		public String getManagerActionTag(String transferURL) {
			if (!this.managerURL.equals(""))
				return "<input type='button'  value='Delete' onclick=\"javascript:manager_runDelete('" + transferURL + "', '" + this.managerURL + "', '" + SEARCH_IP + "', " + SEARCH_PORT + ")\" />";
			else
				return "";
		}

		/**
		 * 검색 결과 페이징 번호를 출력한다.
		 * @param startCount 검색 결과 시작 offset
		 * @param totalCount 검색 결과의 총 개수
		 * @param viewListCount 검색결과로 요청된 offset의 개수
		 * @param bundleCount 페이지 이동할 개수
		 * @return 페이징 문자열 반환
		 */
		public String getPageLinks(int startCount, int totalCount, int viewListCount, int bundleCount) {
			StringBuffer sbRet = new StringBuffer();
			WNAnchor wnanchor = getPageAnchor(startCount, totalCount, viewListCount, bundleCount);
			
			if(wnanchor.getFirstPage() != -1) {
				sbRet.append("<a class=\"num\" href=\"#none\" onClick=\"javascript:doPaging('"+wnanchor.getFirstPage()+"');\" title=\"Previous Page\">&lt;&lt;</a>");
				sbRet.append("<a class=\"pre\" href=\"#none\" onClick=\"javascript:doPaging('"+wnanchor.getBundleBefore()+"');\" title=\"Previous Page\">&lt;&lt;</a>");
			} else {
				wnanchor.m_firstPage = 0;
				
				sbRet.append("<a class=\"num\" href=\"#none\" onClick=\"javascript:doPaging('"+wnanchor.getFirstPage()+"');\" title=\"Previous Page\">&lt;&lt;</a>");
				sbRet.append("<a class=\"pre\" href=\"#none\" title=\"Previous Page\">&lt;&lt;</a>");
			} 
 
			int pageCount = wnanchor.getPageCount();
			String pages[][] = wnanchor.getPages();

			for(int i=0; i<pageCount && i < pages.length; i++) {
				if(pages[i][1].equals("-1")) {
					sbRet.append("<strong>" + pages[i][0] + "</strong>");
				} else {
					sbRet.append("<a href=\"#none\" onClick=\"javascript:doPaging('"+pages[i][1]+"');\" title=\"Paging\"> "+pages[i][0]+" </a>");
				}
			}

			if(wnanchor.getBundleNext() != -1) {
    			sbRet.append("<a class=\"next\" href=\"#none\" onClick=\"javascript:doPaging('"+wnanchor.getBundleNext()+"')\" title=\"Next Page\">&gt;&gt;</a>");
    			sbRet.append("<a class=\"num\" href=\"#none\" onClick=\"javascript:doPaging('"+wnanchor.getLastPage()+"')\" title=\"Next Page\">&gt;&gt;</a>");
    			
			} else {
				sbRet.append("<a class=\"next\" href=\"#none\" title=\"Next Page\">&gt;&gt;</a>");
				sbRet.append("<a class=\"num\" href=\"#none\" onClick=\"javascript:doPaging('"+wnanchor.getLastPage()+"')\" title=\"Next Page\">&gt;&gt;</a>");
			}
 
			return sbRet.toString();
		}

		/**
		 * 페이지 Anchor를 생성한다.
		 * @param startNum 검색 결과 시작 offset
		 * @param totalcount 검색 결과의 총 개수
		 * @param resultCnt 검색결과로 요청된 offset의 개수
		 * @param anchorSacle 페이지 이동할 개수
		 * @return WNAnchor Object를 반환
		 */
		public WNAnchor getPageAnchor(int startNum, int totalcount, int resultCnt, int anchorSacle) {
			WNAnchor anchor = new WNAnchor();

			if(totalcount == 0) {   //등록된 정보가 없으면 페이지 Anchor를 생성 하지 않는다.
				return anchor;
			}

			int curBunbleNum = startNum / (resultCnt * anchorSacle);
			int totalPageCnt = totalcount / resultCnt;
			if(totalcount % resultCnt > 0) {
				totalPageCnt++;
			}

			anchor.setTotalPgCount(totalPageCnt);      // 전체 페이지 세팅

			if ( startNum > 0){        // 이전 페이지
				int beforePg = startNum - resultCnt;
				anchor.setBefore(beforePg);
			}

			if( startNum+resultCnt < totalcount ){        // 다음페이지
				int nextPg = startNum + resultCnt;
				anchor.setNext(nextPg);
			}

			//번들 뒤로 이동
			int bunbleBeforePg = (curBunbleNum-1) * resultCnt * anchorSacle;    //이전 번들로 이동하는 번호
			if(curBunbleNum > 0){
				anchor.setBundleBefore(bunbleBeforePg);
			}

			//번들 앞으로 이동
			int bundleNextPg = (1 + curBunbleNum) * anchorSacle * resultCnt;
			if( totalPageCnt >= anchorSacle && (curBunbleNum+1) * anchorSacle <  totalPageCnt ){
				anchor.setBundleNext(bundleNextPg);
			}

			//맨처음..
			if(startNum != 0 && curBunbleNum != 0){
				anchor.setFirstPage(0);
			}
			//맨끝...
			int lastPage = (resultCnt * totalPageCnt) - resultCnt ;
			if( totalPageCnt >= anchorSacle && (curBunbleNum+1) * anchorSacle <  totalPageCnt ) {
				anchor.setLastPage(lastPage);
			}

			int pageCount = 1;
			String[][] pages = new String[anchorSacle][2];
			for(int i = 0; i < anchorSacle; i++) {
				int startCnt = ((curBunbleNum * anchorSacle) + i) * resultCnt;
				int pageNum = (curBunbleNum * anchorSacle) + i + 1;
				if(startCnt < totalcount) {
					if (startCnt != startNum) {
						pages[i][0] = Integer.toString(pageNum);
						pages[i][1] = Integer.toString(startCnt);
					} else {
						pages[i][0] = Integer.toString(pageNum);
						pages[i][1] = "-1";
						anchor.setCurPageNumber(pageNum);
					}
					anchor.setPageCount(pageCount);
					pageCount++;
				}
			}
			anchor.setPages(pages);
			return anchor;
		}



        /**
         * 검색 결과 페이징 번호를 출력한다.
         * @param startCount 검색 결과 시작 offset
         * @param totalCount 검색 결과의 총 개수
         * @param viewListCount 검색결과로 요청된 offset의 개수
         * @param bundleCount 페이지 이동할 개수
         * @return 페이징 문자열 반환
         */
        public String getPageLinksWebAccess(String base, String url, int startCount, int totalCount, int viewListCount, int bundleCount) {

			String RequestURI = base;
			String RequestURL = url;

            StringBuffer sbRet = new StringBuffer();
            WNAnchor wnanchor = getPageAnchor(startCount, totalCount, viewListCount, bundleCount);
            String ppreImg="";
            String preImg="";
            String nextImg="";
            String nnextImg="";
            ppreImg = "<IMG SRC='images/navi/icon_first.gif' BORDER='0' align='absmiddle'>";
            preImg = "<IMG SRC='images/navi/icon_preview.gif' BORDER='0' align='absmiddle'>";
            nextImg = "<IMG SRC='images/navi/icon_next.gif' BORDER='0' align='absmiddle'>";
            nnextImg = "<IMG SRC='images/navi/icon_end.gif' BORDER='0' align='absmiddle'>";

            if(wnanchor.getFirstPage() != -1) {
                sbRet.append("<A HREF='" + replaceURL(RequestURI, RequestURL, "startCount",String.valueOf(wnanchor.getFirstPage())) +"'  >"+ppreImg+"</A>&nbsp;&nbsp;");
            } else {
                sbRet.append(ppreImg+"&nbsp;");
            }
            if(wnanchor.getBundleBefore() != -1) {
                sbRet.append("<A HREF='" + replaceURL(RequestURI, RequestURL, "startCount", String.valueOf(wnanchor.getFirstPage())) +"'  >"+preImg+"</A>&nbsp;&nbsp;");
            } else {
                sbRet.append(preImg+"&nbsp;");
            }

            int pageCount = wnanchor.getPageCount();
            String pages[][] = wnanchor.getPages();

            for(int i=0; i<pageCount && i < pages.length; i++) {
                if(pages[i][1].equals("-1")) {
                    sbRet.append("<b>" + pages[i][0]+"</b>");
                } else {
                    sbRet.append("<A HREF='" + replaceURL(RequestURI,RequestURL,"startCount", String.valueOf(pages[i][1])) + "' class='nav'> "+pages[i][0]+" </A>");
                }
                if(pageCount > i+1) {
                    sbRet.append("&nbsp;|&nbsp;");// 페이지 경계 1 | 2 | 3
                }
            }
            if(wnanchor.getBundleNext() != -1) {
                sbRet.append("&nbsp;&nbsp;<A HREF='" + replaceURL(RequestURI,RequestURL,"startCount",String.valueOf(wnanchor.getBundleNext())) + "'>"+nextImg+"</A>");
            } else {
                sbRet.append("&nbsp;&nbsp;"+nextImg+"");
            }
            if(wnanchor.getLastPage() != -1) {
                sbRet.append("&nbsp;&nbsp;<A HREF='" + replaceURL(RequestURI,RequestURL,"startCount",String.valueOf(wnanchor.getLastPage())) + "'>"+nnextImg+"</A>");
            } else {
                sbRet.append("&nbsp;&nbsp;"+nnextImg+"");
            }
            return sbRet.toString();
        }


        public String getCollectionKorName(String col) {
            String value = "";
            for ( int idx=0;idx< COLLECTIONS.length; idx++){
                String coll = wncol.COLLECTION_INFO[idx][COLLECTION_NAME].trim();
                if ( coll.equals(col) )
                    return wncol.COLLECTION_INFO[idx][COLLECTION_KOR];

            }

            return value;
        }

		public String getCollectionName(String col) {
			String value = "";
			for ( int idx=0;idx< COLLECTIONS.length; idx++){
				if ( COLLECTIONS[idx].equals(col) ) {
					return COLLECTIONS_NAME[idx];
				}
			}

			return value;
		}
	}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(9);
    _jspx_dependants.put("/page/jhs/./common/api/./WNCommon.jsp", Long.valueOf(1624250427788L));
    _jspx_dependants.put("/page/jhs/./common/api/WNSearch.jsp", Long.valueOf(1624348843894L));
    _jspx_dependants.put("/page/jhs/./common/api/./WNAnchor.jsp", Long.valueOf(1624250427786L));
    _jspx_dependants.put("/page/jhs/./result/result_doc.jsp", Long.valueOf(1624340146905L));
    _jspx_dependants.put("/page/jhs/./common/api/../WNCollection.jsp", Long.valueOf(1624326733925L));
    _jspx_dependants.put("/page/jhs/./result/result_dctn.jsp", Long.valueOf(1624340167336L));
    _jspx_dependants.put("/page/jhs/./common/api/././WNUtils.jsp", Long.valueOf(1624250427790L));
    _jspx_dependants.put("/page/jhs/./common/api/./WNDefine.jsp", Long.valueOf(1624250427788L));
    _jspx_dependants.put("/page/jhs/./common/api/.././api/WNDefine.jsp", Long.valueOf(1624250427788L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
 request.setCharacterEncoding("UTF-8");
      out.write('\r');
      out.write('\n');

    /*
     * subject: 검색 메인 페이지
     * @original author: SearchTool
     */

    //실시간 검색어 화면 출력 여부 체크
    boolean isRealTimeKeyword = false;
    //오타 후 추천 검색어 화면 출력 여부 체크
    boolean useSuggestedQuery = true;
    String suggestQuery = "";

    //디버깅 보기 설정
    boolean isDebug = false;

    int TOTALVIEWCOUNT = 3;    //통합검색시 출력건수
    int COLLECTIONVIEWCOUNT = 10;    //더보기시 출력건수

	String START_DATE = "1970.01.01";	// 기본 시작일

	// 결과 시작 넘버
    int startCount = parseInt(getCheckReqXSS(request, "startCount", "0"), 0);	//시작 번호
    String query = getCheckReqXSS(request, "query", "");						//검색어
    String collection = getCheckReqXSS(request, "collection", "ALL");			//컬렉션이름
    String rt = getCheckReqXSS(request, "rt", "");								//결과내 재검색 체크필드
    String rt2 = getCheckReqXSS(request, "rt2", "");							//결과내 재검색 체크필드
	   String reQuery = getCheckReqXSS(request, "reQuery", "");					//결과내 재검색 체크필드
    String realQuery = getCheckReqXSS(request, "realQuery", "");				//결과내 검색어
    String sort = getCheckReqXSS(request, "sort", "RANK");						//정렬필드
    String range = getCheckReqXSS(request, "range", "A");						//기간관련필드
    String startDate = getCheckReqXSS(request, "startDate", START_DATE);		//시작날짜
    String endDate = getCheckReqXSS(request, "endDate", getCurrentDate());		//끝날짜
	   String writer = getCheckReqXSS(request, "writer", "");						//작성자
	   String searchField = getCheckReqXSS(request, "searchField", "");			//검색필드
	   String strOperation  = "" ;												//operation 조건 필드
    String exquery = "" ;													//exquery 조건 필드
    int totalCount = 0;

    String[] searchFields = null;

	// 상세검색 검색 필드 설정이 되었을때
    if (!searchField.equals("")) {
		// 작성자
		if (!writer.equals("")) {
			exquery = "<WRITER:" + writer + ">";
		}
	} else {
		searchField = "ALL";
	}

    String[] collections = null;
    if(collection.equals("ALL")) { //통합검색인 경우
        collections = COLLECTIONS;
    } else {                        //개별검색인 경우
        collections = new String[] { collection };
    }

	if (reQuery.equals("1")) {
		realQuery = query + " " + realQuery;
	} else if (!reQuery.equals("2")) {
		realQuery = query;
	}

    WNSearch wnsearch = new WNSearch(isDebug,false, collections, searchFields);

    int viewResultCount = COLLECTIONVIEWCOUNT;
    if ( collection.equals("ALL") ||  collection.equals("") )
        viewResultCount = TOTALVIEWCOUNT;

    for (int i = 0; i < collections.length; i++) {

        //출력건수
        wnsearch.setCollectionInfoValue(collections[i], PAGE_INFO, startCount+","+viewResultCount);

        //검색어가 없으면 DATE_RANGE 로 전체 데이터 출력
        if (!query.equals("") ) {
              wnsearch.setCollectionInfoValue(collections[i], SORT_FIELD, sort + "/DESC");
        } else {
              wnsearch.setCollectionInfoValue(collections[i], DATE_RANGE, START_DATE.replaceAll("[.]","/") + ",2030/12/31,-");
              wnsearch.setCollectionInfoValue(collections[i], SORT_FIELD, "RANK/DESC,DATE/DESC");
        }

        //searchField 값이 있으면 설정, 없으면 기본검색필드
        if (!searchField.equals("") && !searchField.equals("WRITER") && searchField.indexOf("ALL") == -1 ) {
			wnsearch.setCollectionInfoValue(collections[i], SEARCH_FIELD, searchField);
		}

        //operation 설정
        if (!strOperation.equals("")) {
			wnsearch.setCollectionInfoValue(collections[i], FILTER_OPERATION, strOperation);
		}

        //exquery 설정
        if (!exquery.equals("")) {
			wnsearch.setCollectionInfoValue(collections[i], EXQUERY_FIELD, exquery);
		}

        //기간 설정 , 날짜가 모두 있을때
        if (!startDate.equals("")  && !endDate.equals("") ) {
             wnsearch.setCollectionInfoValue(collections[i], DATE_RANGE, startDate.replaceAll("[.]","/") + "," + endDate.replaceAll("[.]","/") + ",-");
        }
    };

    wnsearch.search(realQuery, isRealTimeKeyword, CONNECTION_CLOSE, useSuggestedQuery);

     // 디버그 메시지 출력
    String debugMsg = wnsearch.printDebug() != null ? wnsearch.printDebug().trim() : "";
    if ( !debugMsg.trim().equals("")) {
         out.println(debugMsg);
    }

     // 전체건수 구하기
    if ( collection.equals("ALL") ) {
        for (int i = 0; i < collections.length; i++) {
           totalCount += wnsearch.getResultTotalCount(collections[i]);
        }
    } else {
      //개별건수 구하기
        totalCount = wnsearch.getResultTotalCount(collection);
    }

    String thisCollection = "";
    if(useSuggestedQuery) {
       suggestQuery = wnsearch.suggestedQuery;
    }

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\r\n");
      out.write("<meta content=\"IE=Edge\" http-equiv=\"X-UA-Compatible\" />\r\n");
      out.write("<title>jhs통합검색</title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"css/style.css\">\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"css/default.css\">\r\n");
      out.write("<!-- <link rel=\"stylesheet\" type=\"text/css\" href=\"css/search.css\" > -->\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"css/jquery-ui.css\" >\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"ark/css/ark.css\" media=\"screen\" >\r\n");
      out.write("<script type=\"text/javascript\" src=\"js/jquery.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"js/jquery-ui.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"ark/js/beta.fix.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"ark/js/ark.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"js/datepicker.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"js/search.js\"></script><!--  검색관련 js -->\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("$(document).ready(function() {\r\n");
      out.write("\t// 기간 달력 설정\r\n");
      out.write("\t$(\"#startDate\").datepicker({dateFormat: \"yy.mm.dd\"});\r\n");
      out.write("\t$(\"#endDate\").datepicker({dateFormat: \"yy.mm.dd\"});\r\n");
      out.write("\r\n");
      out.write("    getPopkeyword();\r\n");
      out.write("\t// 내가 찾은 검색어\r\n");
      out.write("\tgetMyKeyword(\"");
      out.print(query);
      out.write('"');
      out.write(',');
      out.write(' ');
      out.print(totalCount);
      out.write(");\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function getPopkeyword() {\r\n");
      out.write("\r\n");
      out.write("\tvar target\t\t= \"popword\";\r\n");
      out.write("\tvar range\t\t= \"D\";\r\n");
      out.write("\tvar collection  = \"POP\";\r\n");
      out.write("    var datatype   = \"json\";\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t  type: \"POST\",\r\n");
      out.write("\t  url: \"./popword/popword.jsp\",\r\n");
      out.write("\t  dataType: datatype,\r\n");
      out.write("\t  data: { \"target\" : target, \"range\" : range, \"collection\" : collection , \"datatype\" : datatype },\r\n");
      out.write("\t  success: function(text) {\r\n");
      out.write("     text = trim(text);\r\n");
      out.write("     var xml = $.parseXML(text);\r\n");
      out.write("\t\tvar str = \"<li class='tit'>\";\r\n");
      out.write("\t\tstr += \"<div class='timg'><img src='images/tit_popu.gif' alt='인기검색어' /></div>\";\r\n");
      out.write("\t\tstr += \"</li>\";\r\n");
      out.write("\r\n");
      out.write("\t\t$(xml).find(\"Query\").each(function(){\r\n");
      out.write(" \t\t\tstr += \"<li class='ranking'>\";\r\n");
      out.write("\t\t\tstr += \"\t<ul>\";\r\n");
      out.write("\t\t\tstr += \"\t\t<li class='ranktxt'><img src='images/\"+ $(this).attr(\"id\")+\".gif' alt='' /> <a href='#none' onclick=\\\"javascript:doKeyword('\" + $(this).text() + \"');\\\">\" + $(this).text() + \"</a></li>\";\r\n");
      out.write("\t\t\tstr += \"\t\t<li class='rankico'>\";\r\n");
      out.write("\r\n");
      out.write("\t\t\tif ($(this).attr(\"updown\") == \"U\") {\r\n");
      out.write("\t\t\t\tstr += \"<img src='images/ico_up.gif' alt='상승' />\";\r\n");
      out.write("\t\t\t} else if ($(this).attr(\"updown\") == \"D\") {\r\n");
      out.write("\t\t\t\tstr += \"<img src='images/ico_down.gif' alt='하락' />\";\r\n");
      out.write("\t\t\t} else if ($(this).attr(\"updown\") == \"N\") {\r\n");
      out.write("\t\t\t\tstr += \"<img src='images/ico_new.gif' alt='신규' />\";\r\n");
      out.write("\t\t\t} else if ($(this).attr(\"updown\") == \"C\") {\r\n");
      out.write("\t\t\t\tstr += \"-\";\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tstr += \"\t\t</li>\";\r\n");
      out.write("\t\t\tstr += \"\t\t<li class='rankstep'>\" + $(this).attr(\"count\") + \"</li>\";\r\n");
      out.write("\t\t\tstr += \"\t\t\";\r\n");
      out.write("\t\t\tstr += \"\t</ul>\";\r\n");
      out.write("\t\t\tstr += \"</li>\";\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t$(\"#popword\").html(str);\r\n");
      out.write("\t  }\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"wrap\">\r\n");
      out.write("\r\n");
      out.write("        <!-- header -->\r\n");
      out.write("        <div class=\"header\">\r\n");
      out.write("        \r\n");
      out.write("\t\t\t<form name=\"search\" id=\"search\" action=\"");
      out.print(request.getRequestURI());
      out.write("\" method=\"POST\">\r\n");
      out.write("\t\t\t\t<input type=\"hidden\" name=\"startCount\" value=\"0\">\r\n");
      out.write("\t\t\t\t<input type=\"hidden\" name=\"sort\" value=\"");
      out.print(sort);
      out.write("\">\r\n");
      out.write("\t\t\t\t<input type=\"hidden\" name=\"collection\" value=\"");
      out.print(collection);
      out.write("\">\r\n");
      out.write("\t\t\t\t<input type=\"hidden\" name=\"range\" value=\"");
      out.print(range);
      out.write("\">\r\n");
      out.write("\t\t\t\t<input type=\"hidden\" name=\"startDate\" value=\"");
      out.print(startDate);
      out.write("\">\r\n");
      out.write("\t\t\t\t<input type=\"hidden\" name=\"endDate\"value=\"");
      out.print(endDate);
      out.write("\">\r\n");
      out.write("\t\t\t\t<input type=\"hidden\" name=\"searchField\"value=\"");
      out.print(searchField);
      out.write("\">\r\n");
      out.write("\t\t\t\t<input type=\"hidden\" name=\"reQuery\" />\r\n");
      out.write("\t\t\t\t<input type=\"hidden\" name=\"realQuery\" value=\"");
      out.print(realQuery);
      out.write("\" />        \r\n");
      out.write("\t\t        \r\n");
      out.write("            <div class=\"top clearfix\">\r\n");
      out.write("\t\t\t\t<h1><a href=\"#\"><img src=\"images/logo.PNG\" alt=\"대한지방행정공제회\" /></a></h1>\r\n");
      out.write("\t\t\t\t<div class=\"sch_wrap\">\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\t<select>\r\n");
      out.write("\t\t\t\t\t\t<option>통합검색</option>\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t\t<input name=\"query\" id=\"query\" type=\"text\" value=\"");
      out.print(query);
      out.write("\" onKeypress=\"javascript:pressCheck((event),this);\" autocomplete=\"off\"/>\r\n");
      out.write("\t\t\t\t\t<a href=\"#\" class=\"autoArrow\"><img src=\"images/arr_down.png\" /></a>\r\n");
      out.write("                    <a href=\"#\" onClick=\"javascript:doSearch();\" title=\"검색\" class=\"btn_sch\"></a>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<a href=\"#\" class=\"detail_btn\">상세검색</a>\r\n");
      out.write("\t\t\t\t<div class=\"sch_opt\">\r\n");
      out.write("\t\t\t\t\t<input type=\"checkbox\" id=\"result_chk\" checked=\"checked\" />\r\n");
      out.write("\t\t\t\t\t<label for=\"result_chk\"><input name=\"reChk\" id=\"reChk\" onClick=\"checkReSearch();\" type=\"checkbox\" /><span></span>결과 내 재검색</label>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("                <dl class=\"related_keyword\">\r\n");
      out.write("                    <dt>연관검색어</dt>\r\n");
      out.write("                    <dd><a href=\"#\">검색어</a></dd>\r\n");
      out.write("                    <dd><a href=\"#\">검색어</a></dd>\r\n");
      out.write("                    <dd><a href=\"#\">검색어</a></dd>\r\n");
      out.write("                    <dd><a href=\"#\">검색어</a></dd>\r\n");
      out.write("                    <dd><a href=\"#\">검색어</a></dd>\r\n");
      out.write("                    <dd><a href=\"#\">검색어</a></dd>\r\n");
      out.write("                    <dd><a href=\"#\">검색어</a></dd>\r\n");
      out.write("                    <dd><a href=\"#\">검색어</a></dd>\r\n");
      out.write("                    <dd><a href=\"#\">검색어</a></dd>\r\n");
      out.write("                </dl>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<!-- 자동완성 -->\r\n");
      out.write("\t\t\t\t<div class=\"auto_keyword\" style=\"display:none\">\r\n");
      out.write("\t\t\t\t\t<ul>\r\n");
      out.write("\t\t\t\t\t\t<li><a href=\"#\"><span>제주</span>도교육청</a></li>\r\n");
      out.write("\t\t\t\t\t\t<li><a href=\"#\"><span>제주</span>도연구대회</a></li>\r\n");
      out.write("\t\t\t\t\t\t<li><a href=\"#\"><span>제주</span>도교육감</a></li>\r\n");
      out.write("\t\t\t\t\t\t<li><a href=\"#\"><span>제주</span>어말하기대회</a></li>\r\n");
      out.write("\t\t\t\t\t\t<li><a href=\"#\"><span>제주</span>학생문화원</a></li>\r\n");
      out.write("\t\t\t\t\t\t<li><a href=\"#\"><span>제주</span>시교육지원청</a></li>\r\n");
      out.write("\t\t\t\t\t\t<li><a href=\"#\"><span>제주</span>도서관</a></li>\r\n");
      out.write("\t\t\t\t\t\t<li><a href=\"#\"><span>제주</span>교육과학연구원</a></li>\r\n");
      out.write("\t\t\t\t\t\t<li><a href=\"#\"><span>제주</span>교육박물관제</a></li>\r\n");
      out.write("\t\t\t\t\t\t<li><a href=\"#\"><span>제주</span>영어교육도시</a></li>\r\n");
      out.write("\t\t\t\t\t</ul>\r\n");
      out.write("\t\t\t\t\t<p><a href=\"#\">자동완성 기능 끄기</a></p>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<!-- //자동완성 -->\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("        </div>\r\n");
      out.write("        <!-- //header -->\r\n");
      out.write("\r\n");
      out.write("        <!-- container -->\r\n");
      out.write("        <div class=\"container\">\r\n");
      out.write("            <!-- leftArea -->\r\n");
      out.write("            <div class=\"leftArea\">\r\n");
      out.write("                <ul class=\"lnb\">\r\n");
      out.write("                    <li><a class=\"on\" href=\"#\">통합검색<span>(3,482)</span></a></li>\r\n");
      out.write("                    <li><a href=\"#\">전자결재<span>(100)</span></a></li>\r\n");
      out.write("                    <li><a href=\"#\">게시판<span>(100)</span></a></li>\r\n");
      out.write("                    <li><a href=\"#\">지식<span>(100)</span></a></li>\r\n");
      out.write("                </ul>\r\n");
      out.write("                <div class=\"optionArea\">\r\n");
      out.write("                    <dl class=\"align\">\r\n");
      out.write("                        <dt>정렬</dt>\r\n");
      out.write("                        <dd class=\"divi on\"><a href=\"\">정확도</a></dd>\r\n");
      out.write("                        <dd class=\"divi\"><a class=\"arr\" href=\"\">최신순</a></dd>\r\n");
      out.write("                    </dl>\r\n");
      out.write("                    <dl class=\"area\">\r\n");
      out.write("                        <dt>검색범위</dt>\r\n");
      out.write("                        <dd class=\"divi on\"><a href=\"\">전체</a></dd>\r\n");
      out.write("                        <dd class=\"divi\"><a href=\"\">제목</a></dd>\r\n");
      out.write("                        <dd class=\"divi\"><a href=\"\">내용</a></dd>\r\n");
      out.write("                        <dd class=\"divi\"><a href=\"\">첨부</a></dd>\r\n");
      out.write("                    </dl>\r\n");
      out.write("                    <dl class=\"date\">\r\n");
      out.write("                        <dt>검색기간</dt>\r\n");
      out.write("                        <dd class=\"divi on\"><a href=\"\">전체</a></dd>\r\n");
      out.write("                        <dd class=\"divi\"><a href=\"\">1주</a></dd>\r\n");
      out.write("                        <dd class=\"divi\"><a href=\"\">1달</a></dd>\r\n");
      out.write("                        <dd class=\"divi\"><a href=\"\">1년</a></dd>\r\n");
      out.write("                        <dd class=\"cal_box\">\r\n");
      out.write("                            <span><input type=\"text\" /><a href=\"#\"><img src=\"images/icon_day.gif\" alt=\"달력\" /></a></span>\r\n");
      out.write("                            <span><input type=\"text\" /><a href=\"#\"><img src=\"images/icon_day.gif\" alt=\"달력\" /></a></span>\r\n");
      out.write("                        </dd>\r\n");
      out.write("                        <dd><a href=\"#\" class=\"align_btn\">검색</a></dd>\r\n");
      out.write("                    </dl>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <!-- //leftArea -->\r\n");
      out.write("            <!-- rightArea -->\r\n");
      out.write("            <div class=\"rightArea\">\r\n");
      out.write("                <div class=\"rank\">\r\n");
      out.write("                    <p>인기검색어</p>\r\n");
      out.write("                    <ol id=\"popword\">\r\n");
      out.write("                        \r\n");
      out.write("                    </ol>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"my_keyword\">\r\n");
      out.write("                    <p>내가 찾은 검색어</p>\r\n");
      out.write("                    <ul>\r\n");
      out.write("                        <li><a href=\"\">&middot; 전시</a>\r\n");
      out.write("                            <a class=\"btn_close\" href=\"#\"><img src=\"images/icon_close.gif\" alt=\"close\"></a>\r\n");
      out.write("                        </li>\r\n");
      out.write("                        <li><a href=\"\">&middot; 특별전</a>\r\n");
      out.write("                            <a class=\"btn_close\" href=\"#\"><img src=\"images/icon_close.gif\" alt=\"close\"></a>\r\n");
      out.write("                        </li>\r\n");
      out.write("                    </ul>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"my_keyword\">\r\n");
      out.write("                    <p>최근 본 문서</p>\r\n");
      out.write("                    <ul>\r\n");
      out.write("                        <li><a href=\"\" class=\"tit\">&middot; 전시전시전시전시전시전시전시전시전시</a>\r\n");
      out.write("                            <a class=\"btn_close\" href=\"#\"><img src=\"images/icon_close.gif\" alt=\"close\"></a>\r\n");
      out.write("                        </li>\r\n");
      out.write("                        <li><a href=\"\" class=\"tit\">&middot; 특별전</a>\r\n");
      out.write("                            <a class=\"btn_close\" href=\"#\"><img src=\"images/icon_close.gif\" alt=\"close\"></a>\r\n");
      out.write("                        </li>\r\n");
      out.write("                    </ul>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <!-- //rightArea -->\r\n");
      out.write("            <!-- contents -->\r\n");
      out.write("            <div class=\"contents\">\r\n");
      out.write("                <div class=\"result_top\">\r\n");
      out.write("                    <strong>");
      out.print(query);
      out.write("</strong>에 대한 검색결과는 총[");
      out.print(numberFormat(totalCount));
      out.write("]건 입니다.\r\n");
      out.write("                </div>\r\n");
      out.write("                \r\n");
      out.write("                \r\n");
      out.write("                \r\n");
      out.write("                <div class=\"sectit01\">\r\n");
      out.write("                    ");

/*
* subject: dctn 페이지
* @original author: SearchTool
*/
	thisCollection = "dctn";
	if (collection.equals("ALL") || collection.equals(thisCollection)) {
		int count = wnsearch.getResultCount(thisCollection);
		int thisTotalCount = wnsearch.getResultTotalCount(thisCollection);
		/* test */
		int otherCount = wnsearch.getResultTotalCount("doc");
		otherCount += thisTotalCount;

		if ( thisTotalCount > 0 ) {

      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<div class=\"sectit01\">\r\n");
      out.write("                    <h2>DCTN<span>(");
      out.print(numberFormat(thisTotalCount));
      out.write(")</span></h2>\r\n");

			for(int idx = 0; idx < count; idx ++) {
                String DOCID                    = wnsearch.getField(thisCollection,"DOCID",idx,false);
                String DATE                     = wnsearch.getField(thisCollection,"Date",idx,false);
                String HDWD                     = wnsearch.getField(thisCollection,"HDWD",idx,false);
                String HDWD_NM                  = wnsearch.getField(thisCollection,"HDWD_NM",idx,false);
                String HDWD_CHCH                = wnsearch.getField(thisCollection,"HDWD_CHCH",idx,false);
                String SPPT                     = wnsearch.getField(thisCollection,"SPPT",idx,false);
                String TMNL_DEF                 = wnsearch.getField(thisCollection,"TMNL_DEF",idx,false);
                String ANTN                     = wnsearch.getField(thisCollection,"ANTN",idx,false);
                String USG                      = wnsearch.getField(thisCollection,"USG",idx,false);
                String CTGR                     = wnsearch.getField(thisCollection,"CTGR",idx,false);
                String SRCE_DCTN                = wnsearch.getField(thisCollection,"SRCE_DCTN",idx,false);
                String DCTN_STATE               = wnsearch.getField(thisCollection,"DCTN_STATE",idx,false);
                String DCTN_OPN_YN              = wnsearch.getField(thisCollection,"DCTN_OPN_YN",idx,false);
                String RGST_DTTM                = wnsearch.getField(thisCollection,"RGST_DTTM",idx,false);
                String RGSTR_ID                 = wnsearch.getField(thisCollection,"RGSTR_ID",idx,false);
                String MDFC_DTTM                = wnsearch.getField(thisCollection,"MDFC_DTTM",idx,false);
                String MDFR_ID                  = wnsearch.getField(thisCollection,"MDFR_ID",idx,false);
                String SYST_DTTM                = wnsearch.getField(thisCollection,"SYST_DTTM",idx,false);
                String HANGL_ALPHB_SRWD         = wnsearch.getField(thisCollection,"HANGL_ALPHB_SRWD",idx,false);
                String BLNK_RMV_SRWD            = wnsearch.getField(thisCollection,"BLNK_RMV_SRWD",idx,false);
                String ADD_CN                   = wnsearch.getField(thisCollection,"ADD_CN",idx,false);
                String REF_CN                   = wnsearch.getField(thisCollection,"REF_CN",idx,false);
                String OPNN_CN                  = wnsearch.getField(thisCollection,"OPNN_CN",idx,false);
                String RDCNT                    = wnsearch.getField(thisCollection,"RDCNT",idx,false);
                String TOPIC                    = wnsearch.getField(thisCollection,"TOPIC",idx,false);
                String TERMS                    = wnsearch.getField(thisCollection,"TERMS",idx,false);
                String ALIAS                    = wnsearch.getField(thisCollection,"ALIAS",idx,false);
				HDWD= wnsearch.getKeywordHl(HDWD,"<strong>","</strong>");
				HDWD_NM= wnsearch.getKeywordHl(HDWD_NM,"<strong>","</strong>");
				SPPT= wnsearch.getKeywordHl(SPPT,"<strong>","</strong>");
				TMNL_DEF= wnsearch.getKeywordHl(TMNL_DEF,"<strong>","</strong>");
            String URL = "URL 정책에 맞게 작성해야 합니다.";


      out.write("\r\n");
      out.write("                   <dl class=\"resultsty_1\">\r\n");
      out.write("                       <dt>\r\n");
      out.write("\t\t\t\t\t\t<a class=\"tit\" href=\"#\">");
      out.print(HDWD_NM );
      out.write("</a>\r\n");
      out.write("                           <span>");
      out.print(DATE );
      out.write("</span>\r\n");
      out.write("\t\t\t\t\t</dt>\r\n");
      out.write("                       <dd>");
      out.print(TMNL_DEF );
      out.write("</dd>\r\n");
      out.write("                       <dd>");
      out.print(TERMS );
      out.write("</dd>\r\n");
      out.write("                       <dd class=\"cate\">");
      out.print(RGST_DTTM );
      out.write(" &gt; ");
      out.print(RGSTR_ID );
      out.write("</dd>\r\n");
      out.write("                   </dl>\r\n");
      out.write(" ");

			}

			if ( collection.equals("ALL") && thisTotalCount > TOTALVIEWCOUNT ) {

      out.write("\r\n");
      out.write("\t\t\t\t<a class=\"section_more\" href=\"#none\" onClick=\"javascript:doCollection('");
      out.print(thisCollection);
      out.write("');\">더보기</a>\r\n");
      out.write("               </div>\r\n");

			} 
		}
	}

      out.write("\r\n");
      out.write("                </div>\r\n");
      out.write("                \r\n");
      out.write("                \r\n");
      out.write("                \r\n");
      out.write("                <div class=\"sectit01\">\r\n");
      out.write("                    ");

/*
* subject: doc 페이지
* @original author: SearchTool
*/
	thisCollection = "doc";
	if (collection.equals("ALL") || collection.equals(thisCollection)) {
		int count = wnsearch.getResultCount(thisCollection);
		int thisTotalCount = wnsearch.getResultTotalCount(thisCollection);

		if ( thisTotalCount > 0 ) {

      out.write("\r\n");
      out.write("\t\t<div class=\"sectit01\">\r\n");
      out.write("\t    \t<h2>DOC<span>(");
      out.print(numberFormat(thisTotalCount));
      out.write(")</span></h2>\r\n");

			for(int idx = 0; idx < count; idx ++) {
                String DOCID                    = wnsearch.getField(thisCollection,"DOCID",idx,false);
                String DATE                     = wnsearch.getField(thisCollection,"Date",idx,false);
                String STATE                    = wnsearch.getField(thisCollection,"STATE",idx,false);
                String MENU_CLSF_CD             = wnsearch.getField(thisCollection,"MENU_CLSF_CD",idx,false);
                String DOC_NM                   = wnsearch.getField(thisCollection,"DOC_NM",idx,false);
                String CN_TAG                   = wnsearch.getField(thisCollection,"CN_TAG",idx,false);
                String RDCNT                    = wnsearch.getField(thisCollection,"RDCNT",idx,false);
                String ANMT_YN                  = wnsearch.getField(thisCollection,"ANMT_YN",idx,false);
                String WRT_STATE                = wnsearch.getField(thisCollection,"WRT_STATE",idx,false);
                String DOC_CHNS                 = wnsearch.getField(thisCollection,"DOC_CHNS",idx,false);
                String DOC_ENG                  = wnsearch.getField(thisCollection,"DOC_ENG",idx,false);
                String DOC_SRCLG_ABR            = wnsearch.getField(thisCollection,"DOC_SRCLG_ABR",idx,false);
                String MDFC_DTTM                = wnsearch.getField(thisCollection,"MDFC_DTTM",idx,false);
                String MDFR_ID                  = wnsearch.getField(thisCollection,"MDFR_ID",idx,false);
                String RGST_DTTM                = wnsearch.getField(thisCollection,"RGST_DTTM",idx,false);
                String RGSTR_ID                 = wnsearch.getField(thisCollection,"RGSTR_ID",idx,false);
                String DVS                      = wnsearch.getField(thisCollection,"DVS",idx,false);
                String HDWD_SRCHWD              = wnsearch.getField(thisCollection,"HDWD_SRCHWD",idx,false);
                String ED_MODE                  = wnsearch.getField(thisCollection,"ED_MODE",idx,false);
                String DOC_HNGNM                = wnsearch.getField(thisCollection,"DOC_HNGNM",idx,false);
                String DCTN_KND                 = wnsearch.getField(thisCollection,"DCTN_KND",idx,false);
                String STATUS                   = wnsearch.getField(thisCollection,"STATUS",idx,false);
                String ALIAS                    = wnsearch.getField(thisCollection,"ALIAS",idx,false);
				DOC_NM= wnsearch.getKeywordHl(DOC_NM,"<strong>","</strong>");
				DOC_ENG= wnsearch.getKeywordHl(DOC_ENG,"<strong>","</strong>");
				HDWD_SRCHWD= wnsearch.getKeywordHl(HDWD_SRCHWD,"<strong>","</strong>");
            String URL = "URL 정책에 맞게 작성해야 합니다.";


      out.write("\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("               <dl class=\"resultsty_1\">\r\n");
      out.write("             \t<dt>\r\n");
      out.write("\t\t\t\t<a class=\"tit\" href=\"#\">");
      out.print(DOC_NM  );
      out.write("</a>\r\n");
      out.write("                <span>");
      out.print(DATE );
      out.write("</span>\r\n");
      out.write("\t\t\t\t</dt>\r\n");
      out.write("                <dd>");
      out.print(HDWD_SRCHWD );
      out.write("</dd>\r\n");
      out.write("                <dd>");
      out.print(DVS );
      out.write("</dd>\r\n");
      out.write("                <dd class=\"cate\">");
      out.print(RGST_DTTM  );
      out.write("&gt; ");
      out.print(RGSTR_ID  );
      out.write("</dd>\r\n");
      out.write("               </dl>\r\n");
      out.write("              \r\n");
      out.write(" ");

			}

			if ( collection.equals("ALL") && thisTotalCount > TOTALVIEWCOUNT ) {

      out.write("\r\n");
      out.write("\t\t\t\t<a class=\"section_more\" href=\"#none\" onClick=\"javascript:doCollection('");
      out.print(thisCollection);
      out.write("');\">더보기</a>\r\n");
      out.write("           \t</div>\r\n");

			}
		}
	}

      out.write("\r\n");
      out.write("                </div>\r\n");
      out.write("                \r\n");
      out.write("                <!-- 페이징 처리 -->\r\n");
      out.write("                <!-- 통합검색이 아닌 경우 -->\r\n");
      out.write("\t                <div class=\"btn_num\">\r\n");
      out.write("\t                    ");
      out.print( wnsearch.getPageLinks(startCount, totalCount, COLLECTIONVIEWCOUNT, 10) );
      out.write("\r\n");
      out.write("\t                </div>\r\n");
      out.write("                \r\n");
      out.write("            </div>\r\n");
      out.write("            <!-- //contents -->\r\n");
      out.write("        </div>\r\n");
      out.write("        <!-- //container -->\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");

	if ( wnsearch != null ) {
		wnsearch.closeServer();
	}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
