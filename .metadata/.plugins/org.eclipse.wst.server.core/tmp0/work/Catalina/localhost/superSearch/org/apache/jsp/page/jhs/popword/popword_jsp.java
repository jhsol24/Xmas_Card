/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.23
 * Generated at: 2021-06-30 05:28:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.page.jhs.popword;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.lang.*;
import java.net.*;
import java.util.*;

public final class popword_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


    /**
    *  subject: 검색 환경 설정 페이지
    **/

    



	static String SEARCH_IP="27.96.134.142";
	static int SEARCH_PORT=7000;
	static String MANAGER_IP="27.96.134.142";
	static int MANAGER_PORT=7800;

	public String[] COLLECTIONS = new String[]{"dctn","doc"};
	public String[] COLLECTIONS_NAME = new String[]{"dctn","doc"};
	public String[] MERGE_COLLECTIONS = new String[]{""};
	public class WNCollection{
	public String[][] MERGE_COLLECTION_INFO = null;
	public String[][] COLLECTION_INFO = null;
		WNCollection(){
			COLLECTION_INFO = new String[][]
			{
			{
			"dctn", // set index name
			"dctn", // set collection name
			"0,3",  // set pageinfo (start,count)
			"1,0,0,0,0", // set query analyzer (useKMA,isCase,useOriginal,useSynonym, duplcated detection)
			"RANK/DESC,DATE/DESC",  // set sort field (field,order) multi sort '/'
			"basic,rpfmo,100",  // set sort field (field,order) multi sort '/'
			"TMNL_DEF,HDWD_NM,SPPT,HDWD",// set search field
			"DOCID,Date,HDWD,HDWD_NM,HDWD_CHCH,SPPT,TMNL_DEF,ANTN,USG,CTGR,SRCE_DCTN,DCTN_STATE,DCTN_OPN_YN,RGST_DTTM,RGSTR_ID,MDFC_DTTM,MDFR_ID,SYST_DTTM,HANGL_ALPHB_SRWD,BLNK_RMV_SRWD,ADD_CN,REF_CN,OPNN_CN,RDCNT,TOPIC,TERMS,ALIAS",// set document field
			"", // set date range
			"", // set rank range
			"", // set prefix query, example: <fieldname:contains:value1>|<fieldname:contains:value2>/1,  (fieldname:contains:value) and ' ', or '|', not '!' / operator (AND:1, OR:0)
			"", // set collection query (<fieldname:contains:value^weight | value^weight>/option...) and ' ', or '|'
			"", // set boost query (<fieldname:contains:value> | <field3:contains:value>...) and ' ', or '|'
			"", // set filter operation (<fieldname:operator:value>)
			"", // set groupby field(field, count)
			"", // set sort field group(field/order,field/order,...)
			"", // set categoryBoost(fieldname,matchType,boostID,boostKeyword)
			"", // set categoryGroupBy (fieldname:value)
			"", // set categoryQuery (fieldname:value)
			"", // set property group (fieldname,min,max, groupcount)
			"CTGR,SRCE_DCTN,DCTN_STATE,DCTN_OPN_YN,ALIAS", // use check prefix query filed
			"", // set use check fast access field
			"", // set multigroupby field
			"", // set auth query (Auth Target Field, Auth Collection, Auth Reference Field, Authority Query)
			"", // set Duplicate Detection Criterion Field, RANK/DESC,DATE/DESC
			"dctn" // collection display name
			}
         ,
			{
			"doc", // set index name
			"doc", // set collection name
			"0,3",  // set pageinfo (start,count)
			"1,0,0,0,0", // set query analyzer (useKMA,isCase,useOriginal,useSynonym, duplcated detection)
			"RANK/DESC,DATE/DESC",  // set sort field (field,order) multi sort '/'
			"basic,rpfmo,100",  // set sort field (field,order) multi sort '/'
			"DOC_NM,DOC_ENG,HDWD_SRCHWD",// set search field
			"DOCID,Date,STATE,MENU_CLSF_CD,DOC_NM,CN_TAG,RDCNT,ANMT_YN,WRT_STATE,DOC_CHNS,DOC_ENG,DOC_SRCLG_ABR,MDFC_DTTM,MDFR_ID,RGST_DTTM,RGSTR_ID,DVS,HDWD_SRCHWD,ED_MODE,DOC_HNGNM,DCTN_KND,STATUS,ALIAS",// set document field
			"", // set date range
			"", // set rank range
			"", // set prefix query, example: <fieldname:contains:value1>|<fieldname:contains:value2>/1,  (fieldname:contains:value) and ' ', or '|', not '!' / operator (AND:1, OR:0)
			"", // set collection query (<fieldname:contains:value^weight | value^weight>/option...) and ' ', or '|'
			"", // set boost query (<fieldname:contains:value> | <field3:contains:value>...) and ' ', or '|'
			"", // set filter operation (<fieldname:operator:value>)
			"", // set groupby field(field, count)
			"", // set sort field group(field/order,field/order,...)
			"", // set categoryBoost(fieldname,matchType,boostID,boostKeyword)
			"", // set categoryGroupBy (fieldname:value)
			"", // set categoryQuery (fieldname:value)
			"", // set property group (fieldname,min,max, groupcount)
			"DVS,ED_MODE,DCTN_KND,ALIAS", // use check prefix query filed
			"MDFC_DTTM", // set use check fast access field
			"", // set multigroupby field
			"", // set auth query (Auth Target Field, Auth Collection, Auth Reference Field, Authority Query)
			"", // set Duplicate Detection Criterion Field, RANK/DESC,DATE/DESC
			"doc" // collection display name
			}
			};
		}
	}


	public String getHtmls(String receiverURL, int timeout) throws Exception{
	    StringBuffer receiveMsg = new StringBuffer();
	    HttpURLConnection uc = null;
	    BufferedReader in = null;
	    try{
	        int errorCode   = 0;
	        // -- receive servlet connect
	        URL servletUrl = new URL(receiverURL);
	        uc = (HttpURLConnection)servletUrl.openConnection();
			uc.setReadTimeout(timeout);
	        uc.setRequestMethod("POST");
	        uc.setDoOutput(true);
	        uc.setDoInput(true);
	        uc.setUseCaches(false);
	        uc.connect();
	        // init
	        errorCode = 0;
	        // -- Network error check
	        if(uc.getResponseCode() == HttpURLConnection.HTTP_OK){
				String currLine = new String();
				//UTF-8인 경우
				in = new BufferedReader(new InputStreamReader(uc.getInputStream(), "UTF-8"));
				//BufferedReader in = new BufferedReader(new InputStreamReader(uc.getInputStream()));
				while ((currLine = in.readLine()) != null){
					receiveMsg.append(currLine).append("\r\n");
				}
				in.close();
	        }else{
	            errorCode = uc.getResponseCode();
				return receiveMsg.toString();
	        }
	        uc.disconnect();
	    }catch(Exception ex){
	       // System.out.println( ex );
	    } finally {
	 	   if(in != null) in.close();
	       if(uc != null) uc.disconnect();
	    }
	    return receiveMsg.toString(); 
	}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/page/jhs/popword/../common/./api/WNDefine.jsp", Long.valueOf(1624250427788L));
    _jspx_dependants.put("/page/jhs/popword/../common/WNCollection.jsp", Long.valueOf(1624326733925L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/xml; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

request.setCharacterEncoding("utf-8");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');

    /**
    *  subject: 인기검색어 가져오는 페이지
    **/

	int timeout=500;	// 1000분의 500초 : 0.5초이내에 응답이 없는 경우 연결 종료
	String query = request.getParameter("query"); //Normal:EUC-KR
	String target = request.getParameter("target");
	String charset = request.getParameter("charset");
	String range = request.getParameter("range");
	String collection = request.getParameter("collection");

	if (query != null) { 
		query = URLEncoder.encode(query, "UTF-8");
	}

	String url = "http://" + MANAGER_IP + ":" + MANAGER_PORT + "/manager/WNRun.do?";


	if(query != null){
		url += "query=" + query + "&";
	}
	
	if(target != null){
		url += "target=" + target + "&";	
	}
	
	if(charset != null){
		url += "charset=" + charset + "&";	
	}
	
	if(range != null){
		url += "range=" + range + "&";	
	}
	
	if(collection != null){
		url += "collection=" + collection + "&";	
	}

	out.println(getHtmls(url, timeout)); //send url value

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
